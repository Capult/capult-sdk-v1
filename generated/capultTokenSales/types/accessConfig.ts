/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  unit,
} from '@metaplex-foundation/umi/serializers';
import {
  Allowlist,
  AllowlistArgs,
  WhitelistTokenConfig,
  WhitelistTokenConfigArgs,
  getAllowlistSerializer,
  getWhitelistTokenConfigSerializer,
} from '.';

export type AccessConfig =
  | { __kind: 'None' }
  | { __kind: 'Allowlist'; fields: [Allowlist] }
  | { __kind: 'WhitelistToken'; fields: [WhitelistTokenConfig] };

export type AccessConfigArgs =
  | { __kind: 'None' }
  | { __kind: 'Allowlist'; fields: [AllowlistArgs] }
  | { __kind: 'WhitelistToken'; fields: [WhitelistTokenConfigArgs] };

export function getAccessConfigSerializer(): Serializer<AccessConfigArgs, AccessConfig> {
  return dataEnum<AccessConfig>(
    [
      ['None', unit()],
      [
        'Allowlist',
        struct<GetDataEnumKindContent<AccessConfig, 'Allowlist'>>([['fields', tuple([getAllowlistSerializer()])]]),
      ],
      [
        'WhitelistToken',
        struct<GetDataEnumKindContent<AccessConfig, 'WhitelistToken'>>([
          ['fields', tuple([getWhitelistTokenConfigSerializer()])],
        ]),
      ],
    ],
    { description: 'AccessConfig' }
  ) as Serializer<AccessConfigArgs, AccessConfig>;
}

// Data Enum Helpers.
export function accessConfig(kind: 'None'): GetDataEnumKind<AccessConfigArgs, 'None'>;
export function accessConfig(
  kind: 'Allowlist',
  data: GetDataEnumKindContent<AccessConfigArgs, 'Allowlist'>['fields']
): GetDataEnumKind<AccessConfigArgs, 'Allowlist'>;
export function accessConfig(
  kind: 'WhitelistToken',
  data: GetDataEnumKindContent<AccessConfigArgs, 'WhitelistToken'>['fields']
): GetDataEnumKind<AccessConfigArgs, 'WhitelistToken'>;
export function accessConfig<K extends AccessConfigArgs['__kind']>(
  kind: K,
  data?: any
): Extract<AccessConfigArgs, { __kind: K }> {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function isAccessConfig<K extends AccessConfig['__kind']>(
  kind: K,
  value: AccessConfig
): value is AccessConfig & { __kind: K } {
  return value.__kind === kind;
}
