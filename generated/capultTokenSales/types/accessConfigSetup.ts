/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  unit,
} from '@metaplex-foundation/umi/serializers';
import {
  Allowlist,
  AllowlistArgs,
  WhitelistTokenConfigSetup,
  WhitelistTokenConfigSetupArgs,
  getAllowlistSerializer,
  getWhitelistTokenConfigSetupSerializer,
} from '.';

export type AccessConfigSetup =
  | { __kind: 'None' }
  | { __kind: 'Allowlist'; fields: [Allowlist] }
  | { __kind: 'WhitelistToken'; fields: [WhitelistTokenConfigSetup] };

export type AccessConfigSetupArgs =
  | { __kind: 'None' }
  | { __kind: 'Allowlist'; fields: [AllowlistArgs] }
  | { __kind: 'WhitelistToken'; fields: [WhitelistTokenConfigSetupArgs] };

export function getAccessConfigSetupSerializer(): Serializer<AccessConfigSetupArgs, AccessConfigSetup> {
  return dataEnum<AccessConfigSetup>(
    [
      ['None', unit()],
      [
        'Allowlist',
        struct<GetDataEnumKindContent<AccessConfigSetup, 'Allowlist'>>([['fields', tuple([getAllowlistSerializer()])]]),
      ],
      [
        'WhitelistToken',
        struct<GetDataEnumKindContent<AccessConfigSetup, 'WhitelistToken'>>([
          ['fields', tuple([getWhitelistTokenConfigSetupSerializer()])],
        ]),
      ],
    ],
    { description: 'AccessConfigSetup' }
  ) as Serializer<AccessConfigSetupArgs, AccessConfigSetup>;
}

// Data Enum Helpers.
export function accessConfigSetup(kind: 'None'): GetDataEnumKind<AccessConfigSetupArgs, 'None'>;
export function accessConfigSetup(
  kind: 'Allowlist',
  data: GetDataEnumKindContent<AccessConfigSetupArgs, 'Allowlist'>['fields']
): GetDataEnumKind<AccessConfigSetupArgs, 'Allowlist'>;
export function accessConfigSetup(
  kind: 'WhitelistToken',
  data: GetDataEnumKindContent<AccessConfigSetupArgs, 'WhitelistToken'>['fields']
): GetDataEnumKind<AccessConfigSetupArgs, 'WhitelistToken'>;
export function accessConfigSetup<K extends AccessConfigSetupArgs['__kind']>(
  kind: K,
  data?: any
): Extract<AccessConfigSetupArgs, { __kind: K }> {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function isAccessConfigSetup<K extends AccessConfigSetup['__kind']>(
  kind: K,
  value: AccessConfigSetup
): value is AccessConfigSetup & { __kind: K } {
  return value.__kind === kind;
}
