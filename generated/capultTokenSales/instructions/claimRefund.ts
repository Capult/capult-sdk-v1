/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, expectPublicKey, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type ClaimRefundInstructionAccounts = {
  purchaseRecord?: PublicKey | Pda;
  tokenSale: PublicKey | Pda;
  payer?: Signer;
  authority?: Signer;
  recipient: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type ClaimRefundInstructionData = { discriminator: Uint8Array; lamportsToRefund: bigint };

export type ClaimRefundInstructionDataArgs = { lamportsToRefund: number | bigint };

export function getClaimRefundInstructionDataSerializer(): Serializer<
  ClaimRefundInstructionDataArgs,
  ClaimRefundInstructionData
> {
  return mapSerializer<ClaimRefundInstructionDataArgs, any, ClaimRefundInstructionData>(
    struct<ClaimRefundInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['lamportsToRefund', u64()],
      ],
      { description: 'ClaimRefundInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([15, 16, 30, 161, 255, 228, 97, 60]) })
  ) as Serializer<ClaimRefundInstructionDataArgs, ClaimRefundInstructionData>;
}

// Args.
export type ClaimRefundInstructionArgs = ClaimRefundInstructionDataArgs;

// Instruction.
export function claimRefund(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: ClaimRefundInstructionAccounts & ClaimRefundInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('capultTokenSales', 'CPTSoDzrvBad8fW2DWRgXhb2R5pa8sVdBJvZhfhuyYKe');

  // Accounts.
  const resolvedAccounts = {
    purchaseRecord: { index: 0, isWritable: true as boolean, value: input.purchaseRecord ?? null },
    tokenSale: { index: 1, isWritable: true as boolean, value: input.tokenSale ?? null },
    payer: { index: 2, isWritable: true as boolean, value: input.payer ?? null },
    authority: { index: 3, isWritable: false as boolean, value: input.authority ?? null },
    recipient: { index: 4, isWritable: false as boolean, value: input.recipient ?? null },
    systemProgram: { index: 5, isWritable: false as boolean, value: input.systemProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ClaimRefundInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.purchaseRecord.value) {
    resolvedAccounts.purchaseRecord.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([67, 65, 80, 85, 76, 84, 95, 83, 69, 69, 68])),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.authority.value)),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.tokenSale.value)),
      bytes().serialize(
        new Uint8Array([80, 85, 82, 67, 72, 65, 83, 69, 95, 82, 69, 67, 79, 82, 68, 95, 83, 69, 69, 68])
      ),
    ]);
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getClaimRefundInstructionDataSerializer().serialize(resolvedArgs as ClaimRefundInstructionDataArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
