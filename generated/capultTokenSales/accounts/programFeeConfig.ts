/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type ProgramFeeConfig = Account<ProgramFeeConfigAccountData>;

export type ProgramFeeConfigAccountData = {
  discriminator: Uint8Array;
  authority: Option<PublicKey>;
  withdrawAuthority: PublicKey;
  createSaleFee: bigint;
  botTax: bigint;
  buyFeeBasisPoints: number;
  withdrawFeeBasisPoints: number;
  initializedAt: bigint;
  bump: number;
};

export type ProgramFeeConfigAccountDataArgs = {
  authority: OptionOrNullable<PublicKey>;
  withdrawAuthority: PublicKey;
  createSaleFee: number | bigint;
  botTax: number | bigint;
  buyFeeBasisPoints: number;
  withdrawFeeBasisPoints: number;
  initializedAt: number | bigint;
  bump: number;
};

export function getProgramFeeConfigAccountDataSerializer(): Serializer<
  ProgramFeeConfigAccountDataArgs,
  ProgramFeeConfigAccountData
> {
  return mapSerializer<ProgramFeeConfigAccountDataArgs, any, ProgramFeeConfigAccountData>(
    struct<ProgramFeeConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', option(publicKeySerializer())],
        ['withdrawAuthority', publicKeySerializer()],
        ['createSaleFee', u64()],
        ['botTax', u64()],
        ['buyFeeBasisPoints', u16()],
        ['withdrawFeeBasisPoints', u16()],
        ['initializedAt', i64()],
        ['bump', u8()],
      ],
      { description: 'ProgramFeeConfigAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([137, 187, 115, 117, 88, 111, 171, 30]) })
  ) as Serializer<ProgramFeeConfigAccountDataArgs, ProgramFeeConfigAccountData>;
}

export function deserializeProgramFeeConfig(rawAccount: RpcAccount): ProgramFeeConfig {
  return deserializeAccount(rawAccount, getProgramFeeConfigAccountDataSerializer());
}

export async function fetchProgramFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ProgramFeeConfig> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'ProgramFeeConfig');
  return deserializeProgramFeeConfig(maybeAccount);
}

export async function safeFetchProgramFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ProgramFeeConfig | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeProgramFeeConfig(maybeAccount) : null;
}

export async function fetchAllProgramFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ProgramFeeConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ProgramFeeConfig');
    return deserializeProgramFeeConfig(maybeAccount);
  });
}

export async function safeFetchAllProgramFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ProgramFeeConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeProgramFeeConfig(maybeAccount as RpcAccount));
}

export function getProgramFeeConfigGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('capultTokenSales', 'CPTSoDzrvBad8fW2DWRgXhb2R5pa8sVdBJvZhfhuyYKe');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: OptionOrNullable<PublicKey>;
      withdrawAuthority: PublicKey;
      createSaleFee: number | bigint;
      botTax: number | bigint;
      buyFeeBasisPoints: number;
      withdrawFeeBasisPoints: number;
      initializedAt: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, option(publicKeySerializer())],
      withdrawAuthority: [null, publicKeySerializer()],
      createSaleFee: [null, u64()],
      botTax: [null, u64()],
      buyFeeBasisPoints: [null, u16()],
      withdrawFeeBasisPoints: [null, u16()],
      initializedAt: [null, i64()],
      bump: [null, u8()],
    })
    .deserializeUsing<ProgramFeeConfig>((account) => deserializeProgramFeeConfig(account))
    .whereField('discriminator', new Uint8Array([137, 187, 115, 117, 88, 111, 171, 30]));
}
