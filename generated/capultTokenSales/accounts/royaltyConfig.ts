/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type RoyaltyConfig = Account<RoyaltyConfigAccountData>;

export type RoyaltyConfigAccountData = {
  discriminator: Uint8Array;
  authority: Option<PublicKey>;
  withdrawAuthority: Option<PublicKey>;
  royaltyInitKey: PublicKey;
  bump: number;
};

export type RoyaltyConfigAccountDataArgs = {
  authority: OptionOrNullable<PublicKey>;
  withdrawAuthority: OptionOrNullable<PublicKey>;
  royaltyInitKey: PublicKey;
  bump: number;
};

export function getRoyaltyConfigAccountDataSerializer(): Serializer<
  RoyaltyConfigAccountDataArgs,
  RoyaltyConfigAccountData
> {
  return mapSerializer<RoyaltyConfigAccountDataArgs, any, RoyaltyConfigAccountData>(
    struct<RoyaltyConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', option(publicKeySerializer())],
        ['withdrawAuthority', option(publicKeySerializer())],
        ['royaltyInitKey', publicKeySerializer()],
        ['bump', u8()],
      ],
      { description: 'RoyaltyConfigAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([43, 108, 34, 11, 206, 64, 166, 81]) })
  ) as Serializer<RoyaltyConfigAccountDataArgs, RoyaltyConfigAccountData>;
}

export function deserializeRoyaltyConfig(rawAccount: RpcAccount): RoyaltyConfig {
  return deserializeAccount(rawAccount, getRoyaltyConfigAccountDataSerializer());
}

export async function fetchRoyaltyConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RoyaltyConfig> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'RoyaltyConfig');
  return deserializeRoyaltyConfig(maybeAccount);
}

export async function safeFetchRoyaltyConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RoyaltyConfig | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeRoyaltyConfig(maybeAccount) : null;
}

export async function fetchAllRoyaltyConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RoyaltyConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'RoyaltyConfig');
    return deserializeRoyaltyConfig(maybeAccount);
  });
}

export async function safeFetchAllRoyaltyConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RoyaltyConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeRoyaltyConfig(maybeAccount as RpcAccount));
}

export function getRoyaltyConfigGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('capultTokenSales', 'CPTSoDzrvBad8fW2DWRgXhb2R5pa8sVdBJvZhfhuyYKe');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: OptionOrNullable<PublicKey>;
      withdrawAuthority: OptionOrNullable<PublicKey>;
      royaltyInitKey: PublicKey;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, option(publicKeySerializer())],
      withdrawAuthority: [null, option(publicKeySerializer())],
      royaltyInitKey: [null, publicKeySerializer()],
      bump: [null, u8()],
    })
    .deserializeUsing<RoyaltyConfig>((account) => deserializeRoyaltyConfig(account))
    .whereField('discriminator', new Uint8Array([43, 108, 34, 11, 206, 64, 166, 81]));
}
