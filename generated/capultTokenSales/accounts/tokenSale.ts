/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  AccessConfig,
  AccessConfigArgs,
  Price,
  PriceArgs,
  SaleFeeConfig,
  SaleFeeConfigArgs,
  SaleParameters,
  SaleParametersArgs,
  SaleSchedule,
  SaleScheduleArgs,
  UnlockSchedule,
  UnlockScheduleArgs,
  getAccessConfigSerializer,
  getPriceSerializer,
  getSaleFeeConfigSerializer,
  getSaleParametersSerializer,
  getSaleScheduleSerializer,
  getUnlockScheduleSerializer,
} from '../types';

export type TokenSale = Account<TokenSaleAccountData>;

export type TokenSaleAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  tokenMint: PublicKey;
  price: Price;
  saleAmount: bigint;
  amountSold: bigint;
  saleSchedule: SaleSchedule;
  saleParameters: SaleParameters;
  unlockSchedule: Option<UnlockSchedule>;
  accessConfig: AccessConfig;
  saleInitKey: PublicKey;
  saleFeeConfig: SaleFeeConfig;
  cancelled: boolean;
  finalized: boolean;
  initializedAt: bigint;
  bump: number;
};

export type TokenSaleAccountDataArgs = {
  authority: PublicKey;
  tokenMint: PublicKey;
  price: PriceArgs;
  saleAmount: number | bigint;
  amountSold: number | bigint;
  saleSchedule: SaleScheduleArgs;
  saleParameters: SaleParametersArgs;
  unlockSchedule: OptionOrNullable<UnlockScheduleArgs>;
  accessConfig: AccessConfigArgs;
  saleInitKey: PublicKey;
  saleFeeConfig: SaleFeeConfigArgs;
  cancelled: boolean;
  finalized: boolean;
  initializedAt: number | bigint;
  bump: number;
};

export function getTokenSaleAccountDataSerializer(): Serializer<TokenSaleAccountDataArgs, TokenSaleAccountData> {
  return mapSerializer<TokenSaleAccountDataArgs, any, TokenSaleAccountData>(
    struct<TokenSaleAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['tokenMint', publicKeySerializer()],
        ['price', getPriceSerializer()],
        ['saleAmount', u64()],
        ['amountSold', u64()],
        ['saleSchedule', getSaleScheduleSerializer()],
        ['saleParameters', getSaleParametersSerializer()],
        ['unlockSchedule', option(getUnlockScheduleSerializer())],
        ['accessConfig', getAccessConfigSerializer()],
        ['saleInitKey', publicKeySerializer()],
        ['saleFeeConfig', getSaleFeeConfigSerializer()],
        ['cancelled', bool()],
        ['finalized', bool()],
        ['initializedAt', i64()],
        ['bump', u8()],
      ],
      { description: 'TokenSaleAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([124, 108, 99, 6, 247, 132, 120, 233]) })
  ) as Serializer<TokenSaleAccountDataArgs, TokenSaleAccountData>;
}

export function deserializeTokenSale(rawAccount: RpcAccount): TokenSale {
  return deserializeAccount(rawAccount, getTokenSaleAccountDataSerializer());
}

export async function fetchTokenSale(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenSale> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'TokenSale');
  return deserializeTokenSale(maybeAccount);
}

export async function safeFetchTokenSale(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenSale | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeTokenSale(maybeAccount) : null;
}

export async function fetchAllTokenSale(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenSale[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenSale');
    return deserializeTokenSale(maybeAccount);
  });
}

export async function safeFetchAllTokenSale(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenSale[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTokenSale(maybeAccount as RpcAccount));
}

export function getTokenSaleGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('capultTokenSales', 'CPTSoDzrvBad8fW2DWRgXhb2R5pa8sVdBJvZhfhuyYKe');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      tokenMint: PublicKey;
      price: PriceArgs;
      saleAmount: number | bigint;
      amountSold: number | bigint;
      saleSchedule: SaleScheduleArgs;
      saleParameters: SaleParametersArgs;
      unlockSchedule: OptionOrNullable<UnlockScheduleArgs>;
      accessConfig: AccessConfigArgs;
      saleInitKey: PublicKey;
      saleFeeConfig: SaleFeeConfigArgs;
      cancelled: boolean;
      finalized: boolean;
      initializedAt: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      tokenMint: [40, publicKeySerializer()],
      price: [72, getPriceSerializer()],
      saleAmount: [81, u64()],
      amountSold: [89, u64()],
      saleSchedule: [97, getSaleScheduleSerializer()],
      saleParameters: [null, getSaleParametersSerializer()],
      unlockSchedule: [null, option(getUnlockScheduleSerializer())],
      accessConfig: [null, getAccessConfigSerializer()],
      saleInitKey: [null, publicKeySerializer()],
      saleFeeConfig: [null, getSaleFeeConfigSerializer()],
      cancelled: [null, bool()],
      finalized: [null, bool()],
      initializedAt: [null, i64()],
      bump: [null, u8()],
    })
    .deserializeUsing<TokenSale>((account) => deserializeTokenSale(account))
    .whereField('discriminator', new Uint8Array([124, 108, 99, 6, 247, 132, 120, 233]));
}
