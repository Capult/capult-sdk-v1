/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** NotAuthorized: You are not authorized to perform this action */
export class NotAuthorizedError extends ProgramError {
  override readonly name: string = 'NotAuthorized';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('You are not authorized to perform this action', program, cause);
  }
}
codeToErrorMap.set(0x1770, NotAuthorizedError);
nameToErrorMap.set('NotAuthorized', NotAuthorizedError);

/** FeeTooHigh: Fee is above the maximum allowed */
export class FeeTooHighError extends ProgramError {
  override readonly name: string = 'FeeTooHigh';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Fee is above the maximum allowed', program, cause);
  }
}
codeToErrorMap.set(0x1771, FeeTooHighError);
nameToErrorMap.set('FeeTooHigh', FeeTooHighError);

/** RewardTooHigh: Reward is above the maximum allowed */
export class RewardTooHighError extends ProgramError {
  override readonly name: string = 'RewardTooHigh';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Reward is above the maximum allowed', program, cause);
  }
}
codeToErrorMap.set(0x1772, RewardTooHighError);
nameToErrorMap.set('RewardTooHigh', RewardTooHighError);

/** InvalidTokenProgram: Invalid token program */
export class InvalidTokenProgramError extends ProgramError {
  override readonly name: string = 'InvalidTokenProgram';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Invalid token program', program, cause);
  }
}
codeToErrorMap.set(0x1773, InvalidTokenProgramError);
nameToErrorMap.set('InvalidTokenProgram', InvalidTokenProgramError);

/** TokenMintMismatch: Token mint mismatch */
export class TokenMintMismatchError extends ProgramError {
  override readonly name: string = 'TokenMintMismatch';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Token mint mismatch', program, cause);
  }
}
codeToErrorMap.set(0x1774, TokenMintMismatchError);
nameToErrorMap.set('TokenMintMismatch', TokenMintMismatchError);

/** InvalidStartDate: Invalid start date */
export class InvalidStartDateError extends ProgramError {
  override readonly name: string = 'InvalidStartDate';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Invalid start date', program, cause);
  }
}
codeToErrorMap.set(0x1775, InvalidStartDateError);
nameToErrorMap.set('InvalidStartDate', InvalidStartDateError);

/** InvalidDecimals: Invalid decimals */
export class InvalidDecimalsError extends ProgramError {
  override readonly name: string = 'InvalidDecimals';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Invalid decimals', program, cause);
  }
}
codeToErrorMap.set(0x1776, InvalidDecimalsError);
nameToErrorMap.set('InvalidDecimals', InvalidDecimalsError);

/** TransferHookNotAllowed: Transfer hook is not allowed */
export class TransferHookNotAllowedError extends ProgramError {
  override readonly name: string = 'TransferHookNotAllowed';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Transfer hook is not allowed', program, cause);
  }
}
codeToErrorMap.set(0x1777, TransferHookNotAllowedError);
nameToErrorMap.set('TransferHookNotAllowed', TransferHookNotAllowedError);

/** TransferFeeAmountRequired: Transfer fee amount is required */
export class TransferFeeAmountRequiredError extends ProgramError {
  override readonly name: string = 'TransferFeeAmountRequired';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Transfer fee amount is required', program, cause);
  }
}
codeToErrorMap.set(0x1778, TransferFeeAmountRequiredError);
nameToErrorMap.set('TransferFeeAmountRequired', TransferFeeAmountRequiredError);

/** TransferFeeAmountNotRequired: Transfer fee amount is not required */
export class TransferFeeAmountNotRequiredError extends ProgramError {
  override readonly name: string = 'TransferFeeAmountNotRequired';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Transfer fee amount is not required', program, cause);
  }
}
codeToErrorMap.set(0x1779, TransferFeeAmountNotRequiredError);
nameToErrorMap.set('TransferFeeAmountNotRequired', TransferFeeAmountNotRequiredError);

/** InsufficientVaultBalance: Insufficient vault balance */
export class InsufficientVaultBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientVaultBalance';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Insufficient vault balance', program, cause);
  }
}
codeToErrorMap.set(0x177a, InsufficientVaultBalanceError);
nameToErrorMap.set('InsufficientVaultBalance', InsufficientVaultBalanceError);

/** InvalidAuthority: Invalid authority */
export class InvalidAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidAuthority';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid authority', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);

/** InvalidEndDate: Invalid end date */
export class InvalidEndDateError extends ProgramError {
  override readonly name: string = 'InvalidEndDate';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Invalid end date', program, cause);
  }
}
codeToErrorMap.set(0x177c, InvalidEndDateError);
nameToErrorMap.set('InvalidEndDate', InvalidEndDateError);

/** ScheduleTooShort: Schedule is too short */
export class ScheduleTooShortError extends ProgramError {
  override readonly name: string = 'ScheduleTooShort';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Schedule is too short', program, cause);
  }
}
codeToErrorMap.set(0x177d, ScheduleTooShortError);
nameToErrorMap.set('ScheduleTooShort', ScheduleTooShortError);

/** VaultNotEmpty: Vault is not empty */
export class VaultNotEmptyError extends ProgramError {
  override readonly name: string = 'VaultNotEmpty';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Vault is not empty', program, cause);
  }
}
codeToErrorMap.set(0x177e, VaultNotEmptyError);
nameToErrorMap.set('VaultNotEmpty', VaultNotEmptyError);

/** UnlockIntervalIsZero: Unlock interval must be greater than zero */
export class UnlockIntervalIsZeroError extends ProgramError {
  override readonly name: string = 'UnlockIntervalIsZero';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Unlock interval must be greater than zero', program, cause);
  }
}
codeToErrorMap.set(0x177f, UnlockIntervalIsZeroError);
nameToErrorMap.set('UnlockIntervalIsZero', UnlockIntervalIsZeroError);

/** InvalidCliffAmount: Invalid cliff amount */
export class InvalidCliffAmountError extends ProgramError {
  override readonly name: string = 'InvalidCliffAmount';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Invalid cliff amount', program, cause);
  }
}
codeToErrorMap.set(0x1780, InvalidCliffAmountError);
nameToErrorMap.set('InvalidCliffAmount', InvalidCliffAmountError);

/** AutoClaimIntervalTooShort: Auto claim interval is too short */
export class AutoClaimIntervalTooShortError extends ProgramError {
  override readonly name: string = 'AutoClaimIntervalTooShort';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Auto claim interval is too short', program, cause);
  }
}
codeToErrorMap.set(0x1781, AutoClaimIntervalTooShortError);
nameToErrorMap.set('AutoClaimIntervalTooShort', AutoClaimIntervalTooShortError);

/** AutoClaimMinAmountTooLow: Auto claim minimum amount is too low */
export class AutoClaimMinAmountTooLowError extends ProgramError {
  override readonly name: string = 'AutoClaimMinAmountTooLow';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Auto claim minimum amount is too low', program, cause);
  }
}
codeToErrorMap.set(0x1782, AutoClaimMinAmountTooLowError);
nameToErrorMap.set('AutoClaimMinAmountTooLow', AutoClaimMinAmountTooLowError);

/** StartDateRequiredWithUnlockIntervals: Start date required when using unlock intervals */
export class StartDateRequiredWithUnlockIntervalsError extends ProgramError {
  override readonly name: string = 'StartDateRequiredWithUnlockIntervals';

  readonly code: number = 0x1783; // 6019

  constructor(program: Program, cause?: Error) {
    super('Start date required when using unlock intervals', program, cause);
  }
}
codeToErrorMap.set(0x1783, StartDateRequiredWithUnlockIntervalsError);
nameToErrorMap.set('StartDateRequiredWithUnlockIntervals', StartDateRequiredWithUnlockIntervalsError);

/** StartDateRequiredWithCliffs: Start date required when using cliffs */
export class StartDateRequiredWithCliffsError extends ProgramError {
  override readonly name: string = 'StartDateRequiredWithCliffs';

  readonly code: number = 0x1784; // 6020

  constructor(program: Program, cause?: Error) {
    super('Start date required when using cliffs', program, cause);
  }
}
codeToErrorMap.set(0x1784, StartDateRequiredWithCliffsError);
nameToErrorMap.set('StartDateRequiredWithCliffs', StartDateRequiredWithCliffsError);

/** InsufficientWithdrawableAmount: Insufficient withdrawable amount */
export class InsufficientWithdrawableAmountError extends ProgramError {
  override readonly name: string = 'InsufficientWithdrawableAmount';

  readonly code: number = 0x1785; // 6021

  constructor(program: Program, cause?: Error) {
    super('Insufficient withdrawable amount', program, cause);
  }
}
codeToErrorMap.set(0x1785, InsufficientWithdrawableAmountError);
nameToErrorMap.set('InsufficientWithdrawableAmount', InsufficientWithdrawableAmountError);

/** AuthorityDelegated: Authority is delegated */
export class AuthorityDelegatedError extends ProgramError {
  override readonly name: string = 'AuthorityDelegated';

  readonly code: number = 0x1786; // 6022

  constructor(program: Program, cause?: Error) {
    super('Authority is delegated', program, cause);
  }
}
codeToErrorMap.set(0x1786, AuthorityDelegatedError);
nameToErrorMap.set('AuthorityDelegated', AuthorityDelegatedError);

/** InsufficientVaultLamportBalance: Insufficient vault lamport balance */
export class InsufficientVaultLamportBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientVaultLamportBalance';

  readonly code: number = 0x1787; // 6023

  constructor(program: Program, cause?: Error) {
    super('Insufficient vault lamport balance', program, cause);
  }
}
codeToErrorMap.set(0x1787, InsufficientVaultLamportBalanceError);
nameToErrorMap.set('InsufficientVaultLamportBalance', InsufficientVaultLamportBalanceError);

/** AutoClaimNotConfigured: Auto claim is not configured */
export class AutoClaimNotConfiguredError extends ProgramError {
  override readonly name: string = 'AutoClaimNotConfigured';

  readonly code: number = 0x1788; // 6024

  constructor(program: Program, cause?: Error) {
    super('Auto claim is not configured', program, cause);
  }
}
codeToErrorMap.set(0x1788, AutoClaimNotConfiguredError);
nameToErrorMap.set('AutoClaimNotConfigured', AutoClaimNotConfiguredError);

/** AutoClaimIntervalNotReached: Auto claim interval not reached */
export class AutoClaimIntervalNotReachedError extends ProgramError {
  override readonly name: string = 'AutoClaimIntervalNotReached';

  readonly code: number = 0x1789; // 6025

  constructor(program: Program, cause?: Error) {
    super('Auto claim interval not reached', program, cause);
  }
}
codeToErrorMap.set(0x1789, AutoClaimIntervalNotReachedError);
nameToErrorMap.set('AutoClaimIntervalNotReached', AutoClaimIntervalNotReachedError);

/** AutoClaimAmountNotReached: Auto claim amount not reached */
export class AutoClaimAmountNotReachedError extends ProgramError {
  override readonly name: string = 'AutoClaimAmountNotReached';

  readonly code: number = 0x178a; // 6026

  constructor(program: Program, cause?: Error) {
    super('Auto claim amount not reached', program, cause);
  }
}
codeToErrorMap.set(0x178a, AutoClaimAmountNotReachedError);
nameToErrorMap.set('AutoClaimAmountNotReached', AutoClaimAmountNotReachedError);

/** InvalidTokenMint: Invalid token mint */
export class InvalidTokenMintError extends ProgramError {
  override readonly name: string = 'InvalidTokenMint';

  readonly code: number = 0x178b; // 6027

  constructor(program: Program, cause?: Error) {
    super('Invalid token mint', program, cause);
  }
}
codeToErrorMap.set(0x178b, InvalidTokenMintError);
nameToErrorMap.set('InvalidTokenMint', InvalidTokenMintError);

/** IncorrectWithdrawAuthority: Incorrect withdraw authority */
export class IncorrectWithdrawAuthorityError extends ProgramError {
  override readonly name: string = 'IncorrectWithdrawAuthority';

  readonly code: number = 0x178c; // 6028

  constructor(program: Program, cause?: Error) {
    super('Incorrect withdraw authority', program, cause);
  }
}
codeToErrorMap.set(0x178c, IncorrectWithdrawAuthorityError);
nameToErrorMap.set('IncorrectWithdrawAuthority', IncorrectWithdrawAuthorityError);

/** InsufficientBalance: Insufficient token balance */
export class InsufficientBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientBalance';

  readonly code: number = 0x178d; // 6029

  constructor(program: Program, cause?: Error) {
    super('Insufficient token balance', program, cause);
  }
}
codeToErrorMap.set(0x178d, InsufficientBalanceError);
nameToErrorMap.set('InsufficientBalance', InsufficientBalanceError);

/** UnlockIntervalNotAllowed: Unlock interval is not allowed */
export class UnlockIntervalNotAllowedError extends ProgramError {
  override readonly name: string = 'UnlockIntervalNotAllowed';

  readonly code: number = 0x178e; // 6030

  constructor(program: Program, cause?: Error) {
    super('Unlock interval is not allowed', program, cause);
  }
}
codeToErrorMap.set(0x178e, UnlockIntervalNotAllowedError);
nameToErrorMap.set('UnlockIntervalNotAllowed', UnlockIntervalNotAllowedError);

/** IntervalLessThanPrevious: New unlock interval must be higher than previous */
export class IntervalLessThanPreviousError extends ProgramError {
  override readonly name: string = 'IntervalLessThanPrevious';

  readonly code: number = 0x178f; // 6031

  constructor(program: Program, cause?: Error) {
    super('New unlock interval must be higher than previous', program, cause);
  }
}
codeToErrorMap.set(0x178f, IntervalLessThanPreviousError);
nameToErrorMap.set('IntervalLessThanPrevious', IntervalLessThanPreviousError);

/** InvalidUnlockIntervalEndDate: Invalid unlock interval and end date combination */
export class InvalidUnlockIntervalEndDateError extends ProgramError {
  override readonly name: string = 'InvalidUnlockIntervalEndDate';

  readonly code: number = 0x1790; // 6032

  constructor(program: Program, cause?: Error) {
    super('Invalid unlock interval and end date combination', program, cause);
  }
}
codeToErrorMap.set(0x1790, InvalidUnlockIntervalEndDateError);
nameToErrorMap.set('InvalidUnlockIntervalEndDate', InvalidUnlockIntervalEndDateError);

/** NoFeesToCollect: No fees to collect */
export class NoFeesToCollectError extends ProgramError {
  override readonly name: string = 'NoFeesToCollect';

  readonly code: number = 0x1791; // 6033

  constructor(program: Program, cause?: Error) {
    super('No fees to collect', program, cause);
  }
}
codeToErrorMap.set(0x1791, NoFeesToCollectError);
nameToErrorMap.set('NoFeesToCollect', NoFeesToCollectError);

/** StartDateTooFarInFuture: Start date is too far in the future */
export class StartDateTooFarInFutureError extends ProgramError {
  override readonly name: string = 'StartDateTooFarInFuture';

  readonly code: number = 0x1792; // 6034

  constructor(program: Program, cause?: Error) {
    super('Start date is too far in the future', program, cause);
  }
}
codeToErrorMap.set(0x1792, StartDateTooFarInFutureError);
nameToErrorMap.set('StartDateTooFarInFuture', StartDateTooFarInFutureError);

/** AmountMustBeGreaterThanZero: Amount must be greater than zero */
export class AmountMustBeGreaterThanZeroError extends ProgramError {
  override readonly name: string = 'AmountMustBeGreaterThanZero';

  readonly code: number = 0x1793; // 6035

  constructor(program: Program, cause?: Error) {
    super('Amount must be greater than zero', program, cause);
  }
}
codeToErrorMap.set(0x1793, AmountMustBeGreaterThanZeroError);
nameToErrorMap.set('AmountMustBeGreaterThanZero', AmountMustBeGreaterThanZeroError);

/** WithdrawableAmountAfterFeesIsZero: Withdrawable amount after transfer fees is zero */
export class WithdrawableAmountAfterFeesIsZeroError extends ProgramError {
  override readonly name: string = 'WithdrawableAmountAfterFeesIsZero';

  readonly code: number = 0x1794; // 6036

  constructor(program: Program, cause?: Error) {
    super('Withdrawable amount after transfer fees is zero', program, cause);
  }
}
codeToErrorMap.set(0x1794, WithdrawableAmountAfterFeesIsZeroError);
nameToErrorMap.set('WithdrawableAmountAfterFeesIsZero', WithdrawableAmountAfterFeesIsZeroError);

/** InvalidCliffAmountAfterFees: Invalid cliff amount after transfer fees */
export class InvalidCliffAmountAfterFeesError extends ProgramError {
  override readonly name: string = 'InvalidCliffAmountAfterFees';

  readonly code: number = 0x1795; // 6037

  constructor(program: Program, cause?: Error) {
    super('Invalid cliff amount after transfer fees', program, cause);
  }
}
codeToErrorMap.set(0x1795, InvalidCliffAmountAfterFeesError);
nameToErrorMap.set('InvalidCliffAmountAfterFees', InvalidCliffAmountAfterFeesError);

/** CliffBasisPointsTooHigh: Cliff basis points are too high */
export class CliffBasisPointsTooHighError extends ProgramError {
  override readonly name: string = 'CliffBasisPointsTooHigh';

  readonly code: number = 0x1796; // 6038

  constructor(program: Program, cause?: Error) {
    super('Cliff basis points are too high', program, cause);
  }
}
codeToErrorMap.set(0x1796, CliffBasisPointsTooHighError);
nameToErrorMap.set('CliffBasisPointsTooHigh', CliffBasisPointsTooHighError);

/** PermanentAuthorityWithDelegated: Permanent authority cannot be used with delegated authority */
export class PermanentAuthorityWithDelegatedError extends ProgramError {
  override readonly name: string = 'PermanentAuthorityWithDelegated';

  readonly code: number = 0x1797; // 6039

  constructor(program: Program, cause?: Error) {
    super('Permanent authority cannot be used with delegated authority', program, cause);
  }
}
codeToErrorMap.set(0x1797, PermanentAuthorityWithDelegatedError);
nameToErrorMap.set('PermanentAuthorityWithDelegated', PermanentAuthorityWithDelegatedError);

/** PermanentAuthorityCannotBeChanged: Permanent authority cannot be changed */
export class PermanentAuthorityCannotBeChangedError extends ProgramError {
  override readonly name: string = 'PermanentAuthorityCannotBeChanged';

  readonly code: number = 0x1798; // 6040

  constructor(program: Program, cause?: Error) {
    super('Permanent authority cannot be changed', program, cause);
  }
}
codeToErrorMap.set(0x1798, PermanentAuthorityCannotBeChangedError);
nameToErrorMap.set('PermanentAuthorityCannotBeChanged', PermanentAuthorityCannotBeChangedError);

/** InvalidTokenLockVaultAccount: Invalid token lock vault account */
export class InvalidTokenLockVaultAccountError extends ProgramError {
  override readonly name: string = 'InvalidTokenLockVaultAccount';

  readonly code: number = 0x1799; // 6041

  constructor(program: Program, cause?: Error) {
    super('Invalid token lock vault account', program, cause);
  }
}
codeToErrorMap.set(0x1799, InvalidTokenLockVaultAccountError);
nameToErrorMap.set('InvalidTokenLockVaultAccount', InvalidTokenLockVaultAccountError);

/** AuthorityAlreadyPermanent: Authority is already permanent */
export class AuthorityAlreadyPermanentError extends ProgramError {
  override readonly name: string = 'AuthorityAlreadyPermanent';

  readonly code: number = 0x179a; // 6042

  constructor(program: Program, cause?: Error) {
    super('Authority is already permanent', program, cause);
  }
}
codeToErrorMap.set(0x179a, AuthorityAlreadyPermanentError);
nameToErrorMap.set('AuthorityAlreadyPermanent', AuthorityAlreadyPermanentError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getCapultTokenLockVaultsErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getCapultTokenLockVaultsErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
