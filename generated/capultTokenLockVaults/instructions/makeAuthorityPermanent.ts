/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, bytes, mapSerializer, struct } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type MakeAuthorityPermanentInstructionAccounts = {
  tokenLockVault: PublicKey | Pda;
  withdrawAuthority: Signer;
};

// Data.
export type MakeAuthorityPermanentInstructionData = { discriminator: Uint8Array };

export type MakeAuthorityPermanentInstructionDataArgs = {};

export function getMakeAuthorityPermanentInstructionDataSerializer(): Serializer<
  MakeAuthorityPermanentInstructionDataArgs,
  MakeAuthorityPermanentInstructionData
> {
  return mapSerializer<MakeAuthorityPermanentInstructionDataArgs, any, MakeAuthorityPermanentInstructionData>(
    struct<MakeAuthorityPermanentInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'MakeAuthorityPermanentInstructionData',
    }),
    (value) => ({ ...value, discriminator: new Uint8Array([51, 244, 255, 35, 216, 173, 239, 12]) })
  ) as Serializer<MakeAuthorityPermanentInstructionDataArgs, MakeAuthorityPermanentInstructionData>;
}

// Instruction.
export function makeAuthorityPermanent(
  context: Pick<Context, 'programs'>,
  input: MakeAuthorityPermanentInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultTokenLockVaults',
    'CPTLVeSKEXbPNZ4WnHTTGBX4J2uV3ktv3YkL9i7wSPwC'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenLockVault: { index: 0, isWritable: true as boolean, value: input.tokenLockVault ?? null },
    withdrawAuthority: { index: 1, isWritable: false as boolean, value: input.withdrawAuthority ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getMakeAuthorityPermanentInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
