/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, expectPublicKey, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type CreateRoyaltyConfigInstructionAccounts = {
  royaltyConfig?: PublicKey | Pda;
  payer?: Signer;
  authority?: PublicKey | Pda;
  withdrawAuthority?: PublicKey | Pda;
  royaltyInitKey: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateRoyaltyConfigInstructionData = { discriminator: Uint8Array };

export type CreateRoyaltyConfigInstructionDataArgs = {};

export function getCreateRoyaltyConfigInstructionDataSerializer(): Serializer<
  CreateRoyaltyConfigInstructionDataArgs,
  CreateRoyaltyConfigInstructionData
> {
  return mapSerializer<CreateRoyaltyConfigInstructionDataArgs, any, CreateRoyaltyConfigInstructionData>(
    struct<CreateRoyaltyConfigInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'CreateRoyaltyConfigInstructionData',
    }),
    (value) => ({ ...value, discriminator: new Uint8Array([98, 152, 171, 115, 254, 28, 55, 69]) })
  ) as Serializer<CreateRoyaltyConfigInstructionDataArgs, CreateRoyaltyConfigInstructionData>;
}

// Instruction.
export function createRoyaltyConfig(
  context: Pick<Context, 'eddsa' | 'payer' | 'programs'>,
  input: CreateRoyaltyConfigInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultTokenLockVaults',
    'CPTLVeSKEXbPNZ4WnHTTGBX4J2uV3ktv3YkL9i7wSPwC'
  );

  // Accounts.
  const resolvedAccounts = {
    royaltyConfig: { index: 0, isWritable: true as boolean, value: input.royaltyConfig ?? null },
    payer: { index: 1, isWritable: true as boolean, value: input.payer ?? null },
    authority: { index: 2, isWritable: false as boolean, value: input.authority ?? null },
    withdrawAuthority: { index: 3, isWritable: false as boolean, value: input.withdrawAuthority ?? null },
    royaltyInitKey: { index: 4, isWritable: false as boolean, value: input.royaltyInitKey ?? null },
    systemProgram: { index: 5, isWritable: false as boolean, value: input.systemProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.royaltyConfig.value) {
    resolvedAccounts.royaltyConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([67, 65, 80, 85, 76, 84, 95, 83, 69, 69, 68])),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.royaltyInitKey.value)),
      bytes().serialize(new Uint8Array([82, 79, 89, 65, 76, 84, 89, 95, 67, 79, 78, 70, 73, 71, 95, 83, 69, 69, 68])),
    ]);
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getCreateRoyaltyConfigInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
