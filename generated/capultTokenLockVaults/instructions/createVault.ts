/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, expectPublicKey, getAccountMetasAndSigners } from '../shared';
import {
  AutoClaimSetupArgs,
  AutoClaimSetupArgsArgs,
  Cliff,
  CliffArgs,
  getAutoClaimSetupArgsSerializer,
  getCliffSerializer,
} from '../types';

// Accounts.
export type CreateVaultInstructionAccounts = {
  tokenLockVault?: PublicKey | Pda;
  payer?: Signer;
  withdrawAuthority: PublicKey | Pda;
  delegatedAuthority?: PublicKey | Pda;
  vaultInitKey: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  programConfig?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateVaultInstructionData = {
  discriminator: Uint8Array;
  permanentAuthority: boolean;
  startDate: Option<bigint>;
  endDate: bigint;
  unlockInterval: Option<bigint>;
  cliff: Cliff;
  autoClaimSetup: Option<AutoClaimSetupArgs>;
};

export type CreateVaultInstructionDataArgs = {
  permanentAuthority: boolean;
  startDate: OptionOrNullable<number | bigint>;
  endDate: number | bigint;
  unlockInterval: OptionOrNullable<number | bigint>;
  cliff: CliffArgs;
  autoClaimSetup: OptionOrNullable<AutoClaimSetupArgsArgs>;
};

export function getCreateVaultInstructionDataSerializer(): Serializer<
  CreateVaultInstructionDataArgs,
  CreateVaultInstructionData
> {
  return mapSerializer<CreateVaultInstructionDataArgs, any, CreateVaultInstructionData>(
    struct<CreateVaultInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['permanentAuthority', bool()],
        ['startDate', option(i64())],
        ['endDate', i64()],
        ['unlockInterval', option(i64())],
        ['cliff', getCliffSerializer()],
        ['autoClaimSetup', option(getAutoClaimSetupArgsSerializer())],
      ],
      { description: 'CreateVaultInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([29, 237, 247, 208, 193, 82, 54, 135]) })
  ) as Serializer<CreateVaultInstructionDataArgs, CreateVaultInstructionData>;
}

// Args.
export type CreateVaultInstructionArgs = CreateVaultInstructionDataArgs;

// Instruction.
export function createVault(
  context: Pick<Context, 'eddsa' | 'payer' | 'programs'>,
  input: CreateVaultInstructionAccounts & CreateVaultInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultTokenLockVaults',
    'CPTLVeSKEXbPNZ4WnHTTGBX4J2uV3ktv3YkL9i7wSPwC'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenLockVault: { index: 0, isWritable: true as boolean, value: input.tokenLockVault ?? null },
    payer: { index: 1, isWritable: true as boolean, value: input.payer ?? null },
    withdrawAuthority: { index: 2, isWritable: false as boolean, value: input.withdrawAuthority ?? null },
    delegatedAuthority: { index: 3, isWritable: false as boolean, value: input.delegatedAuthority ?? null },
    vaultInitKey: { index: 4, isWritable: false as boolean, value: input.vaultInitKey ?? null },
    tokenMint: { index: 5, isWritable: false as boolean, value: input.tokenMint ?? null },
    programConfig: { index: 6, isWritable: false as boolean, value: input.programConfig ?? null },
    tokenProgram: { index: 7, isWritable: false as boolean, value: input.tokenProgram ?? null },
    associatedTokenProgram: { index: 8, isWritable: false as boolean, value: input.associatedTokenProgram ?? null },
    systemProgram: { index: 9, isWritable: false as boolean, value: input.systemProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateVaultInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenLockVault.value) {
    resolvedAccounts.tokenLockVault.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([67, 65, 80, 85, 76, 84, 95, 83, 69, 69, 68])),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.vaultInitKey.value)),
      bytes().serialize(
        new Uint8Array([84, 79, 75, 69, 78, 95, 76, 79, 67, 75, 95, 86, 65, 85, 76, 84, 95, 83, 69, 69, 68])
      ),
    ]);
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.programConfig.value) {
    resolvedAccounts.programConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([80, 82, 79, 71, 82, 65, 77, 95, 67, 79, 78, 70, 73, 71, 95, 83, 69, 69, 68])),
    ]);
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value = context.programs.getPublicKey(
      'associatedTokenProgram',
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getCreateVaultInstructionDataSerializer().serialize(resolvedArgs as CreateVaultInstructionDataArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
