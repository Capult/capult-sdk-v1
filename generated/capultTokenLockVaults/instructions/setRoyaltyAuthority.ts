/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, bytes, mapSerializer, struct } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';
import { RoyaltyAuthorityType, RoyaltyAuthorityTypeArgs, getRoyaltyAuthorityTypeSerializer } from '../types';

// Accounts.
export type SetRoyaltyAuthorityInstructionAccounts = {
  royaltyConfig: PublicKey | Pda;
  currentConfigAuthority: Signer;
  newAuthority?: PublicKey | Pda;
};

// Data.
export type SetRoyaltyAuthorityInstructionData = { discriminator: Uint8Array; authorityType: RoyaltyAuthorityType };

export type SetRoyaltyAuthorityInstructionDataArgs = { authorityType: RoyaltyAuthorityTypeArgs };

export function getSetRoyaltyAuthorityInstructionDataSerializer(): Serializer<
  SetRoyaltyAuthorityInstructionDataArgs,
  SetRoyaltyAuthorityInstructionData
> {
  return mapSerializer<SetRoyaltyAuthorityInstructionDataArgs, any, SetRoyaltyAuthorityInstructionData>(
    struct<SetRoyaltyAuthorityInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authorityType', getRoyaltyAuthorityTypeSerializer()],
      ],
      { description: 'SetRoyaltyAuthorityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([109, 68, 192, 154, 62, 51, 254, 48]) })
  ) as Serializer<SetRoyaltyAuthorityInstructionDataArgs, SetRoyaltyAuthorityInstructionData>;
}

// Args.
export type SetRoyaltyAuthorityInstructionArgs = SetRoyaltyAuthorityInstructionDataArgs;

// Instruction.
export function setRoyaltyAuthority(
  context: Pick<Context, 'programs'>,
  input: SetRoyaltyAuthorityInstructionAccounts & SetRoyaltyAuthorityInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultTokenLockVaults',
    'CPTLVeSKEXbPNZ4WnHTTGBX4J2uV3ktv3YkL9i7wSPwC'
  );

  // Accounts.
  const resolvedAccounts = {
    royaltyConfig: { index: 0, isWritable: true as boolean, value: input.royaltyConfig ?? null },
    currentConfigAuthority: { index: 1, isWritable: false as boolean, value: input.currentConfigAuthority ?? null },
    newAuthority: { index: 2, isWritable: false as boolean, value: input.newAuthority ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetRoyaltyAuthorityInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getSetRoyaltyAuthorityInstructionDataSerializer().serialize(
    resolvedArgs as SetRoyaltyAuthorityInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
