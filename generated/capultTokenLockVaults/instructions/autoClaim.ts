/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, expectPublicKey, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type AutoClaimInstructionAccounts = {
  tokenLockVault: PublicKey | Pda;
  claimInitiator: Signer;
  vaultAta?: PublicKey | Pda;
  recipientAta: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  programConfig?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
};

// Data.
export type AutoClaimInstructionData = { discriminator: Uint8Array; declineClaimReward: boolean };

export type AutoClaimInstructionDataArgs = { declineClaimReward: boolean };

export function getAutoClaimInstructionDataSerializer(): Serializer<
  AutoClaimInstructionDataArgs,
  AutoClaimInstructionData
> {
  return mapSerializer<AutoClaimInstructionDataArgs, any, AutoClaimInstructionData>(
    struct<AutoClaimInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['declineClaimReward', bool()],
      ],
      { description: 'AutoClaimInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([184, 222, 148, 135, 212, 37, 111, 148]) })
  ) as Serializer<AutoClaimInstructionDataArgs, AutoClaimInstructionData>;
}

// Args.
export type AutoClaimInstructionArgs = AutoClaimInstructionDataArgs;

// Instruction.
export function autoClaim(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: AutoClaimInstructionAccounts & AutoClaimInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultTokenLockVaults',
    'CPTLVeSKEXbPNZ4WnHTTGBX4J2uV3ktv3YkL9i7wSPwC'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenLockVault: { index: 0, isWritable: true as boolean, value: input.tokenLockVault ?? null },
    claimInitiator: { index: 1, isWritable: true as boolean, value: input.claimInitiator ?? null },
    vaultAta: { index: 2, isWritable: true as boolean, value: input.vaultAta ?? null },
    recipientAta: { index: 3, isWritable: true as boolean, value: input.recipientAta ?? null },
    tokenMint: { index: 4, isWritable: false as boolean, value: input.tokenMint ?? null },
    programConfig: { index: 5, isWritable: false as boolean, value: input.programConfig ?? null },
    tokenProgram: { index: 6, isWritable: false as boolean, value: input.tokenProgram ?? null },
    associatedTokenProgram: { index: 7, isWritable: false as boolean, value: input.associatedTokenProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: AutoClaimInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.vaultAta.value) {
    resolvedAccounts.vaultAta.value = context.eddsa.findPda(programId, [
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.tokenLockVault.value)),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.tokenProgram.value)),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.tokenMint.value)),
    ]);
  }
  if (!resolvedAccounts.programConfig.value) {
    resolvedAccounts.programConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([80, 82, 79, 71, 82, 65, 77, 95, 67, 79, 78, 70, 73, 71, 95, 83, 69, 69, 68])),
    ]);
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value = context.programs.getPublicKey(
      'associatedTokenProgram',
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getAutoClaimInstructionDataSerializer().serialize(resolvedArgs as AutoClaimInstructionDataArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
