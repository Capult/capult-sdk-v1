/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, bytes, mapSerializer, struct } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';
import { AuthorityType, AuthorityTypeArgs, getAuthorityTypeSerializer } from '../types';

// Accounts.
export type SetAuthorityInstructionAccounts = {
  tokenLockVault: PublicKey | Pda;
  currentAuthority: Signer;
  newAuthority?: PublicKey | Pda;
};

// Data.
export type SetAuthorityInstructionData = { discriminator: Uint8Array; authorityType: AuthorityType };

export type SetAuthorityInstructionDataArgs = { authorityType: AuthorityTypeArgs };

export function getSetAuthorityInstructionDataSerializer(): Serializer<
  SetAuthorityInstructionDataArgs,
  SetAuthorityInstructionData
> {
  return mapSerializer<SetAuthorityInstructionDataArgs, any, SetAuthorityInstructionData>(
    struct<SetAuthorityInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authorityType', getAuthorityTypeSerializer()],
      ],
      { description: 'SetAuthorityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([133, 250, 37, 21, 110, 163, 26, 121]) })
  ) as Serializer<SetAuthorityInstructionDataArgs, SetAuthorityInstructionData>;
}

// Args.
export type SetAuthorityInstructionArgs = SetAuthorityInstructionDataArgs;

// Instruction.
export function setAuthority(
  context: Pick<Context, 'programs'>,
  input: SetAuthorityInstructionAccounts & SetAuthorityInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultTokenLockVaults',
    'CPTLVeSKEXbPNZ4WnHTTGBX4J2uV3ktv3YkL9i7wSPwC'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenLockVault: { index: 0, isWritable: true as boolean, value: input.tokenLockVault ?? null },
    currentAuthority: { index: 1, isWritable: false as boolean, value: input.currentAuthority ?? null },
    newAuthority: { index: 2, isWritable: false as boolean, value: input.newAuthority ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetAuthorityInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getSetAuthorityInstructionDataSerializer().serialize(resolvedArgs as SetAuthorityInstructionDataArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
