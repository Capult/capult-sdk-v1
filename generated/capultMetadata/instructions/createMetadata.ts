/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, bytes, mapSerializer, string, struct } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type CreateMetadataInstructionAccounts = {
  metadata: PublicKey | Pda;
  capultOwnedPda: PublicKey | Pda;
  authority?: Signer;
  payer?: Signer;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateMetadataInstructionData = { discriminator: Uint8Array; url: string };

export type CreateMetadataInstructionDataArgs = { url: string };

export function getCreateMetadataInstructionDataSerializer(): Serializer<
  CreateMetadataInstructionDataArgs,
  CreateMetadataInstructionData
> {
  return mapSerializer<CreateMetadataInstructionDataArgs, any, CreateMetadataInstructionData>(
    struct<CreateMetadataInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['url', string()],
      ],
      { description: 'CreateMetadataInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([30, 35, 117, 134, 196, 139, 44, 25]) })
  ) as Serializer<CreateMetadataInstructionDataArgs, CreateMetadataInstructionData>;
}

// Args.
export type CreateMetadataInstructionArgs = CreateMetadataInstructionDataArgs;

// Instruction.
export function createMetadata(
  context: Pick<Context, 'identity' | 'payer' | 'programs'>,
  input: CreateMetadataInstructionAccounts & CreateMetadataInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('capultMetadata', 'CPMDk1zycejhBAPLUiCrYfQWDD5Kdi19zzM4s1ts6EkQ');

  // Accounts.
  const resolvedAccounts = {
    metadata: { index: 0, isWritable: true as boolean, value: input.metadata ?? null },
    capultOwnedPda: { index: 1, isWritable: false as boolean, value: input.capultOwnedPda ?? null },
    authority: { index: 2, isWritable: false as boolean, value: input.authority ?? null },
    payer: { index: 3, isWritable: true as boolean, value: input.payer ?? null },
    systemProgram: { index: 4, isWritable: false as boolean, value: input.systemProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateMetadataInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getCreateMetadataInstructionDataSerializer().serialize(
    resolvedArgs as CreateMetadataInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
