/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** NotAuthorized: You are not authorized to perform this action */
export class NotAuthorizedError extends ProgramError {
  override readonly name: string = 'NotAuthorized';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('You are not authorized to perform this action', program, cause);
  }
}
codeToErrorMap.set(0x1770, NotAuthorizedError);
nameToErrorMap.set('NotAuthorized', NotAuthorizedError);

/** FeeTooHigh: Fee is above the maximum allowed */
export class FeeTooHighError extends ProgramError {
  override readonly name: string = 'FeeTooHigh';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Fee is above the maximum allowed', program, cause);
  }
}
codeToErrorMap.set(0x1771, FeeTooHighError);
nameToErrorMap.set('FeeTooHigh', FeeTooHighError);

/** InvalidTokenProgram: Invalid token program */
export class InvalidTokenProgramError extends ProgramError {
  override readonly name: string = 'InvalidTokenProgram';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid token program', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidTokenProgramError);
nameToErrorMap.set('InvalidTokenProgram', InvalidTokenProgramError);

/** InvalidStartDate: Invalid start date */
export class InvalidStartDateError extends ProgramError {
  override readonly name: string = 'InvalidStartDate';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Invalid start date', program, cause);
  }
}
codeToErrorMap.set(0x1773, InvalidStartDateError);
nameToErrorMap.set('InvalidStartDate', InvalidStartDateError);

/** TokenProgramMismatch: Token program mismatch */
export class TokenProgramMismatchError extends ProgramError {
  override readonly name: string = 'TokenProgramMismatch';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Token program mismatch', program, cause);
  }
}
codeToErrorMap.set(0x1774, TokenProgramMismatchError);
nameToErrorMap.set('TokenProgramMismatch', TokenProgramMismatchError);

/** InvalidDecimals: Invalid decimals */
export class InvalidDecimalsError extends ProgramError {
  override readonly name: string = 'InvalidDecimals';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Invalid decimals', program, cause);
  }
}
codeToErrorMap.set(0x1775, InvalidDecimalsError);
nameToErrorMap.set('InvalidDecimals', InvalidDecimalsError);

/** InvalidMintExtension: Invalid mint extension */
export class InvalidMintExtensionError extends ProgramError {
  override readonly name: string = 'InvalidMintExtension';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Invalid mint extension', program, cause);
  }
}
codeToErrorMap.set(0x1776, InvalidMintExtensionError);
nameToErrorMap.set('InvalidMintExtension', InvalidMintExtensionError);

/** TransferFeeAmountRequired: Transfer fee amount required */
export class TransferFeeAmountRequiredError extends ProgramError {
  override readonly name: string = 'TransferFeeAmountRequired';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Transfer fee amount required', program, cause);
  }
}
codeToErrorMap.set(0x1777, TransferFeeAmountRequiredError);
nameToErrorMap.set('TransferFeeAmountRequired', TransferFeeAmountRequiredError);

/** UnlockAlreadyInitiated: Unlock already initiated */
export class UnlockAlreadyInitiatedError extends ProgramError {
  override readonly name: string = 'UnlockAlreadyInitiated';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Unlock already initiated', program, cause);
  }
}
codeToErrorMap.set(0x1778, UnlockAlreadyInitiatedError);
nameToErrorMap.set('UnlockAlreadyInitiated', UnlockAlreadyInitiatedError);

/** UnlockNotInitiated: Unlock not initiated */
export class UnlockNotInitiatedError extends ProgramError {
  override readonly name: string = 'UnlockNotInitiated';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Unlock not initiated', program, cause);
  }
}
codeToErrorMap.set(0x1779, UnlockNotInitiatedError);
nameToErrorMap.set('UnlockNotInitiated', UnlockNotInitiatedError);

/** UnlockDelayMismatch: Unlock delay mismatch */
export class UnlockDelayMismatchError extends ProgramError {
  override readonly name: string = 'UnlockDelayMismatch';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Unlock delay mismatch', program, cause);
  }
}
codeToErrorMap.set(0x177a, UnlockDelayMismatchError);
nameToErrorMap.set('UnlockDelayMismatch', UnlockDelayMismatchError);

/** UnlockDateNotReached: Unlock date not reached */
export class UnlockDateNotReachedError extends ProgramError {
  override readonly name: string = 'UnlockDateNotReached';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Unlock date not reached', program, cause);
  }
}
codeToErrorMap.set(0x177b, UnlockDateNotReachedError);
nameToErrorMap.set('UnlockDateNotReached', UnlockDateNotReachedError);

/** InsufficientVaultBalance: Insufficient vault balance */
export class InsufficientVaultBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientVaultBalance';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Insufficient vault balance', program, cause);
  }
}
codeToErrorMap.set(0x177c, InsufficientVaultBalanceError);
nameToErrorMap.set('InsufficientVaultBalance', InsufficientVaultBalanceError);

/** InvalidAuthority: Invalid authority */
export class InvalidAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidAuthority';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Invalid authority', program, cause);
  }
}
codeToErrorMap.set(0x177d, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);

/** VaultNotEmpty: Vault not empty */
export class VaultNotEmptyError extends ProgramError {
  override readonly name: string = 'VaultNotEmpty';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Vault not empty', program, cause);
  }
}
codeToErrorMap.set(0x177e, VaultNotEmptyError);
nameToErrorMap.set('VaultNotEmpty', VaultNotEmptyError);

/** UnlockDelayNotMultipleOf60: Unlock delay must be a multiple of 60 */
export class UnlockDelayNotMultipleOf60Error extends ProgramError {
  override readonly name: string = 'UnlockDelayNotMultipleOf60';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Unlock delay must be a multiple of 60', program, cause);
  }
}
codeToErrorMap.set(0x177f, UnlockDelayNotMultipleOf60Error);
nameToErrorMap.set('UnlockDelayNotMultipleOf60', UnlockDelayNotMultipleOf60Error);

/** UnlockDelayTooShort: Unlock delay is too short */
export class UnlockDelayTooShortError extends ProgramError {
  override readonly name: string = 'UnlockDelayTooShort';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Unlock delay is too short', program, cause);
  }
}
codeToErrorMap.set(0x1780, UnlockDelayTooShortError);
nameToErrorMap.set('UnlockDelayTooShort', UnlockDelayTooShortError);

/** UnlockDelayTooLong: Unlock delay is too long */
export class UnlockDelayTooLongError extends ProgramError {
  override readonly name: string = 'UnlockDelayTooLong';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Unlock delay is too long', program, cause);
  }
}
codeToErrorMap.set(0x1781, UnlockDelayTooLongError);
nameToErrorMap.set('UnlockDelayTooLong', UnlockDelayTooLongError);

/** InvalidTokenMint: Invalid token mint */
export class InvalidTokenMintError extends ProgramError {
  override readonly name: string = 'InvalidTokenMint';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Invalid token mint', program, cause);
  }
}
codeToErrorMap.set(0x1782, InvalidTokenMintError);
nameToErrorMap.set('InvalidTokenMint', InvalidTokenMintError);

/** TransferFeeAmountNotRequired: Transfer fee amount not required */
export class TransferFeeAmountNotRequiredError extends ProgramError {
  override readonly name: string = 'TransferFeeAmountNotRequired';

  readonly code: number = 0x1783; // 6019

  constructor(program: Program, cause?: Error) {
    super('Transfer fee amount not required', program, cause);
  }
}
codeToErrorMap.set(0x1783, TransferFeeAmountNotRequiredError);
nameToErrorMap.set('TransferFeeAmountNotRequired', TransferFeeAmountNotRequiredError);

/** TransferHookNotAllowed: Transfer hook not allowed */
export class TransferHookNotAllowedError extends ProgramError {
  override readonly name: string = 'TransferHookNotAllowed';

  readonly code: number = 0x1784; // 6020

  constructor(program: Program, cause?: Error) {
    super('Transfer hook not allowed', program, cause);
  }
}
codeToErrorMap.set(0x1784, TransferHookNotAllowedError);
nameToErrorMap.set('TransferHookNotAllowed', TransferHookNotAllowedError);

/** InsufficientBalance: Insufficient balance */
export class InsufficientBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientBalance';

  readonly code: number = 0x1785; // 6021

  constructor(program: Program, cause?: Error) {
    super('Insufficient balance', program, cause);
  }
}
codeToErrorMap.set(0x1785, InsufficientBalanceError);
nameToErrorMap.set('InsufficientBalance', InsufficientBalanceError);

/** InsufficientVaultLamportBalance: Insufficient vault lamport balance */
export class InsufficientVaultLamportBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientVaultLamportBalance';

  readonly code: number = 0x1786; // 6022

  constructor(program: Program, cause?: Error) {
    super('Insufficient vault lamport balance', program, cause);
  }
}
codeToErrorMap.set(0x1786, InsufficientVaultLamportBalanceError);
nameToErrorMap.set('InsufficientVaultLamportBalance', InsufficientVaultLamportBalanceError);

/** InvalidEternalVaultAccount: Invalid eternal vault account */
export class InvalidEternalVaultAccountError extends ProgramError {
  override readonly name: string = 'InvalidEternalVaultAccount';

  readonly code: number = 0x1787; // 6023

  constructor(program: Program, cause?: Error) {
    super('Invalid eternal vault account', program, cause);
  }
}
codeToErrorMap.set(0x1787, InvalidEternalVaultAccountError);
nameToErrorMap.set('InvalidEternalVaultAccount', InvalidEternalVaultAccountError);

/** NoFeesToCollect: No fees to collect */
export class NoFeesToCollectError extends ProgramError {
  override readonly name: string = 'NoFeesToCollect';

  readonly code: number = 0x1788; // 6024

  constructor(program: Program, cause?: Error) {
    super('No fees to collect', program, cause);
  }
}
codeToErrorMap.set(0x1788, NoFeesToCollectError);
nameToErrorMap.set('NoFeesToCollect', NoFeesToCollectError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getCapultEternalVaultsErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getCapultEternalVaultsErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
