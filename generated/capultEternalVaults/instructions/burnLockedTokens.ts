/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, expectPublicKey, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type BurnLockedTokensInstructionAccounts = {
  eternalVault: PublicKey | Pda;
  authority?: Signer;
  vaultAta?: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type BurnLockedTokensInstructionData = { discriminator: Uint8Array; tokenAmount: bigint; decimals: number };

export type BurnLockedTokensInstructionDataArgs = { tokenAmount: number | bigint; decimals: number };

export function getBurnLockedTokensInstructionDataSerializer(): Serializer<
  BurnLockedTokensInstructionDataArgs,
  BurnLockedTokensInstructionData
> {
  return mapSerializer<BurnLockedTokensInstructionDataArgs, any, BurnLockedTokensInstructionData>(
    struct<BurnLockedTokensInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['tokenAmount', u64()],
        ['decimals', u8()],
      ],
      { description: 'BurnLockedTokensInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([139, 63, 59, 237, 80, 127, 172, 191]) })
  ) as Serializer<BurnLockedTokensInstructionDataArgs, BurnLockedTokensInstructionData>;
}

// Args.
export type BurnLockedTokensInstructionArgs = BurnLockedTokensInstructionDataArgs;

// Instruction.
export function burnLockedTokens(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: BurnLockedTokensInstructionAccounts & BurnLockedTokensInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultEternalVaults',
    'CPEVjv7pvzLceHN9auJhniU2y3divtY4PUaTvLEoxpbP'
  );

  // Accounts.
  const resolvedAccounts = {
    eternalVault: { index: 0, isWritable: false as boolean, value: input.eternalVault ?? null },
    authority: { index: 1, isWritable: true as boolean, value: input.authority ?? null },
    vaultAta: { index: 2, isWritable: true as boolean, value: input.vaultAta ?? null },
    tokenMint: { index: 3, isWritable: true as boolean, value: input.tokenMint ?? null },
    tokenProgram: { index: 4, isWritable: false as boolean, value: input.tokenProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: BurnLockedTokensInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.vaultAta.value) {
    resolvedAccounts.vaultAta.value = context.eddsa.findPda(programId, [
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.eternalVault.value)),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.tokenProgram.value)),
      publicKeySerializer().serialize(expectPublicKey(resolvedAccounts.tokenMint.value)),
    ]);
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getBurnLockedTokensInstructionDataSerializer().serialize(
    resolvedArgs as BurnLockedTokensInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
