/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, bytes, mapSerializer, struct } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type CloseVaultInstructionAccounts = {
  eternalVault: PublicKey | Pda;
  vaultAta: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  authority?: Signer;
  recipient?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type CloseVaultInstructionData = { discriminator: Uint8Array };

export type CloseVaultInstructionDataArgs = {};

export function getCloseVaultInstructionDataSerializer(): Serializer<
  CloseVaultInstructionDataArgs,
  CloseVaultInstructionData
> {
  return mapSerializer<CloseVaultInstructionDataArgs, any, CloseVaultInstructionData>(
    struct<CloseVaultInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'CloseVaultInstructionData',
    }),
    (value) => ({ ...value, discriminator: new Uint8Array([141, 103, 17, 126, 72, 75, 29, 29]) })
  ) as Serializer<CloseVaultInstructionDataArgs, CloseVaultInstructionData>;
}

// Instruction.
export function closeVault(
  context: Pick<Context, 'identity' | 'programs'>,
  input: CloseVaultInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultEternalVaults',
    'CPEVjv7pvzLceHN9auJhniU2y3divtY4PUaTvLEoxpbP'
  );

  // Accounts.
  const resolvedAccounts = {
    eternalVault: { index: 0, isWritable: true as boolean, value: input.eternalVault ?? null },
    vaultAta: { index: 1, isWritable: false as boolean, value: input.vaultAta ?? null },
    tokenMint: { index: 2, isWritable: false as boolean, value: input.tokenMint ?? null },
    authority: { index: 3, isWritable: true as boolean, value: input.authority ?? null },
    recipient: { index: 4, isWritable: true as boolean, value: input.recipient ?? null },
    tokenProgram: { index: 5, isWritable: false as boolean, value: input.tokenProgram ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.recipient.value) {
    resolvedAccounts.recipient.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getCloseVaultInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
