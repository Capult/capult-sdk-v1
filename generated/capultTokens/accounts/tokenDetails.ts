/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type TokenDetails = Account<TokenDetailsAccountData>;

export type TokenDetailsAccountData = {
  discriminator: Uint8Array;
  manageAuthority: PublicKey;
  tokenMint: PublicKey;
  isTokenAthority: boolean;
  initializedAt: bigint;
  bump: number;
  presale: Option<PublicKey>;
};

export type TokenDetailsAccountDataArgs = {
  manageAuthority: PublicKey;
  tokenMint: PublicKey;
  isTokenAthority: boolean;
  initializedAt: number | bigint;
  bump: number;
  presale: OptionOrNullable<PublicKey>;
};

export function getTokenDetailsAccountDataSerializer(): Serializer<
  TokenDetailsAccountDataArgs,
  TokenDetailsAccountData
> {
  return mapSerializer<TokenDetailsAccountDataArgs, any, TokenDetailsAccountData>(
    struct<TokenDetailsAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['manageAuthority', publicKeySerializer()],
        ['tokenMint', publicKeySerializer()],
        ['isTokenAthority', bool()],
        ['initializedAt', i64()],
        ['bump', u8()],
        ['presale', option(publicKeySerializer())],
      ],
      { description: 'TokenDetailsAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([83, 49, 200, 250, 222, 246, 143, 58]) })
  ) as Serializer<TokenDetailsAccountDataArgs, TokenDetailsAccountData>;
}

export function deserializeTokenDetails(rawAccount: RpcAccount): TokenDetails {
  return deserializeAccount(rawAccount, getTokenDetailsAccountDataSerializer());
}

export async function fetchTokenDetails(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenDetails> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'TokenDetails');
  return deserializeTokenDetails(maybeAccount);
}

export async function safeFetchTokenDetails(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenDetails | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeTokenDetails(maybeAccount) : null;
}

export async function fetchAllTokenDetails(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenDetails[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenDetails');
    return deserializeTokenDetails(maybeAccount);
  });
}

export async function safeFetchAllTokenDetails(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenDetails[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTokenDetails(maybeAccount as RpcAccount));
}

export function getTokenDetailsGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('capultTokens', 'CPLT8dWFQ1VH4ZJkvqSrLLFFPtCcKDm4XJ51t4K4mEiN');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      manageAuthority: PublicKey;
      tokenMint: PublicKey;
      isTokenAthority: boolean;
      initializedAt: number | bigint;
      bump: number;
      presale: OptionOrNullable<PublicKey>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      manageAuthority: [8, publicKeySerializer()],
      tokenMint: [40, publicKeySerializer()],
      isTokenAthority: [72, bool()],
      initializedAt: [73, i64()],
      bump: [81, u8()],
      presale: [82, option(publicKeySerializer())],
    })
    .deserializeUsing<TokenDetails>((account) => deserializeTokenDetails(account))
    .whereField('discriminator', new Uint8Array([83, 49, 200, 250, 222, 246, 143, 58]));
}

export function findTokenDetailsPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    tokenMint: PublicKey;

    authority: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey('capultTokens', 'CPLT8dWFQ1VH4ZJkvqSrLLFFPtCcKDm4XJ51t4K4mEiN');
  return context.eddsa.findPda(programId, [
    bytes().serialize(
      new Uint8Array([
        67, 65, 80, 85, 76, 84, 95, 84, 79, 75, 69, 78, 95, 68, 69, 84, 65, 73, 76, 83, 95, 83, 69, 69, 68,
      ])
    ),
    publicKeySerializer().serialize(seeds.tokenMint),
    publicKeySerializer().serialize(seeds.authority),
  ]);
}

export async function fetchTokenDetailsFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findTokenDetailsPda>[1],
  options?: RpcGetAccountOptions
): Promise<TokenDetails> {
  return fetchTokenDetails(context, findTokenDetailsPda(context, seeds), options);
}

export async function safeFetchTokenDetailsFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findTokenDetailsPda>[1],
  options?: RpcGetAccountOptions
): Promise<TokenDetails | null> {
  return safeFetchTokenDetails(context, findTokenDetailsPda(context, seeds), options);
}
