/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** NotAuthorized: You are not authorized to perform this action */
export class NotAuthorizedError extends ProgramError {
  override readonly name: string = 'NotAuthorized';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('You are not authorized to perform this action', program, cause);
  }
}
codeToErrorMap.set(0x1770, NotAuthorizedError);
nameToErrorMap.set('NotAuthorized', NotAuthorizedError);

/** FeeTooHigh: Fee is above the maximum allowed */
export class FeeTooHighError extends ProgramError {
  override readonly name: string = 'FeeTooHigh';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Fee is above the maximum allowed', program, cause);
  }
}
codeToErrorMap.set(0x1771, FeeTooHighError);
nameToErrorMap.set('FeeTooHigh', FeeTooHighError);

/** InvalidTokenProgram: Invalid token program */
export class InvalidTokenProgramError extends ProgramError {
  override readonly name: string = 'InvalidTokenProgram';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid token program', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidTokenProgramError);
nameToErrorMap.set('InvalidTokenProgram', InvalidTokenProgramError);

/** InvalidStartDate: Invalid start date */
export class InvalidStartDateError extends ProgramError {
  override readonly name: string = 'InvalidStartDate';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Invalid start date', program, cause);
  }
}
codeToErrorMap.set(0x1773, InvalidStartDateError);
nameToErrorMap.set('InvalidStartDate', InvalidStartDateError);

/** InvalidDecimals: Invalid decimals */
export class InvalidDecimalsError extends ProgramError {
  override readonly name: string = 'InvalidDecimals';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid decimals', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidDecimalsError);
nameToErrorMap.set('InvalidDecimals', InvalidDecimalsError);

/** TransferHookNotAllowed: Transfer hook not allowed */
export class TransferHookNotAllowedError extends ProgramError {
  override readonly name: string = 'TransferHookNotAllowed';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Transfer hook not allowed', program, cause);
  }
}
codeToErrorMap.set(0x1775, TransferHookNotAllowedError);
nameToErrorMap.set('TransferHookNotAllowed', TransferHookNotAllowedError);

/** TransferFeeAmountRequired: Transfer fee amount required */
export class TransferFeeAmountRequiredError extends ProgramError {
  override readonly name: string = 'TransferFeeAmountRequired';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Transfer fee amount required', program, cause);
  }
}
codeToErrorMap.set(0x1776, TransferFeeAmountRequiredError);
nameToErrorMap.set('TransferFeeAmountRequired', TransferFeeAmountRequiredError);

/** TransferFeeAmountNotRequired: Transfer fee amount not required */
export class TransferFeeAmountNotRequiredError extends ProgramError {
  override readonly name: string = 'TransferFeeAmountNotRequired';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Transfer fee amount not required', program, cause);
  }
}
codeToErrorMap.set(0x1777, TransferFeeAmountNotRequiredError);
nameToErrorMap.set('TransferFeeAmountNotRequired', TransferFeeAmountNotRequiredError);

/** InsufficientSaleBalance: Insufficient sale balance */
export class InsufficientSaleBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientSaleBalance';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Insufficient sale balance', program, cause);
  }
}
codeToErrorMap.set(0x1778, InsufficientSaleBalanceError);
nameToErrorMap.set('InsufficientSaleBalance', InsufficientSaleBalanceError);

/** InsufficientWithdrawableAmount: Insufficient withdrawable amount */
export class InsufficientWithdrawableAmountError extends ProgramError {
  override readonly name: string = 'InsufficientWithdrawableAmount';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Insufficient withdrawable amount', program, cause);
  }
}
codeToErrorMap.set(0x1779, InsufficientWithdrawableAmountError);
nameToErrorMap.set('InsufficientWithdrawableAmount', InsufficientWithdrawableAmountError);

/** InsufficientSaleLamportBalance: Insufficient sale lamport balance */
export class InsufficientSaleLamportBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientSaleLamportBalance';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Insufficient sale lamport balance', program, cause);
  }
}
codeToErrorMap.set(0x177a, InsufficientSaleLamportBalanceError);
nameToErrorMap.set('InsufficientSaleLamportBalance', InsufficientSaleLamportBalanceError);

/** InvalidTokenMint: Invalid token mint */
export class InvalidTokenMintError extends ProgramError {
  override readonly name: string = 'InvalidTokenMint';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid token mint', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidTokenMintError);
nameToErrorMap.set('InvalidTokenMint', InvalidTokenMintError);

/** IncorrectWithdrawAuthority: Incorrect withdraw authority */
export class IncorrectWithdrawAuthorityError extends ProgramError {
  override readonly name: string = 'IncorrectWithdrawAuthority';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Incorrect withdraw authority', program, cause);
  }
}
codeToErrorMap.set(0x177c, IncorrectWithdrawAuthorityError);
nameToErrorMap.set('IncorrectWithdrawAuthority', IncorrectWithdrawAuthorityError);

/** InsufficientBalance: Insufficient token balance */
export class InsufficientBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientBalance';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Insufficient token balance', program, cause);
  }
}
codeToErrorMap.set(0x177d, InsufficientBalanceError);
nameToErrorMap.set('InsufficientBalance', InsufficientBalanceError);

/** InvalidUnlockIntervalEndDate: Invalid unlock interval and end date combination */
export class InvalidUnlockIntervalEndDateError extends ProgramError {
  override readonly name: string = 'InvalidUnlockIntervalEndDate';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Invalid unlock interval and end date combination', program, cause);
  }
}
codeToErrorMap.set(0x177e, InvalidUnlockIntervalEndDateError);
nameToErrorMap.set('InvalidUnlockIntervalEndDate', InvalidUnlockIntervalEndDateError);

/** NoFeesToCollect: No fees to collect */
export class NoFeesToCollectError extends ProgramError {
  override readonly name: string = 'NoFeesToCollect';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('No fees to collect', program, cause);
  }
}
codeToErrorMap.set(0x177f, NoFeesToCollectError);
nameToErrorMap.set('NoFeesToCollect', NoFeesToCollectError);

/** AmountIsZero: Amount is zero */
export class AmountIsZeroError extends ProgramError {
  override readonly name: string = 'AmountIsZero';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Amount is zero', program, cause);
  }
}
codeToErrorMap.set(0x1780, AmountIsZeroError);
nameToErrorMap.set('AmountIsZero', AmountIsZeroError);

/** WithdrawableAmountAfterFeesIsZero: Withdrawable amount after transfer fees is zero */
export class WithdrawableAmountAfterFeesIsZeroError extends ProgramError {
  override readonly name: string = 'WithdrawableAmountAfterFeesIsZero';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Withdrawable amount after transfer fees is zero', program, cause);
  }
}
codeToErrorMap.set(0x1781, WithdrawableAmountAfterFeesIsZeroError);
nameToErrorMap.set('WithdrawableAmountAfterFeesIsZero', WithdrawableAmountAfterFeesIsZeroError);

/** InvalidSaleAmount: Invalid sale amount */
export class InvalidSaleAmountError extends ProgramError {
  override readonly name: string = 'InvalidSaleAmount';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Invalid sale amount', program, cause);
  }
}
codeToErrorMap.set(0x1782, InvalidSaleAmountError);
nameToErrorMap.set('InvalidSaleAmount', InvalidSaleAmountError);

/** InvalidSalePrice: Invalid sale price */
export class InvalidSalePriceError extends ProgramError {
  override readonly name: string = 'InvalidSalePrice';

  readonly code: number = 0x1783; // 6019

  constructor(program: Program, cause?: Error) {
    super('Invalid sale price', program, cause);
  }
}
codeToErrorMap.set(0x1783, InvalidSalePriceError);
nameToErrorMap.set('InvalidSalePrice', InvalidSalePriceError);

/** InvalidStartSlot: Invalid start slot */
export class InvalidStartSlotError extends ProgramError {
  override readonly name: string = 'InvalidStartSlot';

  readonly code: number = 0x1784; // 6020

  constructor(program: Program, cause?: Error) {
    super('Invalid start slot', program, cause);
  }
}
codeToErrorMap.set(0x1784, InvalidStartSlotError);
nameToErrorMap.set('InvalidStartSlot', InvalidStartSlotError);

/** InvalidEndSlot: Invalid end slot */
export class InvalidEndSlotError extends ProgramError {
  override readonly name: string = 'InvalidEndSlot';

  readonly code: number = 0x1785; // 6021

  constructor(program: Program, cause?: Error) {
    super('Invalid end slot', program, cause);
  }
}
codeToErrorMap.set(0x1785, InvalidEndSlotError);
nameToErrorMap.set('InvalidEndSlot', InvalidEndSlotError);

/** InvalidMinBuyAmount: Invalid min buy amount */
export class InvalidMinBuyAmountError extends ProgramError {
  override readonly name: string = 'InvalidMinBuyAmount';

  readonly code: number = 0x1786; // 6022

  constructor(program: Program, cause?: Error) {
    super('Invalid min buy amount', program, cause);
  }
}
codeToErrorMap.set(0x1786, InvalidMinBuyAmountError);
nameToErrorMap.set('InvalidMinBuyAmount', InvalidMinBuyAmountError);

/** InvalidMaxBuyAmount: Invalid max buy amount */
export class InvalidMaxBuyAmountError extends ProgramError {
  override readonly name: string = 'InvalidMaxBuyAmount';

  readonly code: number = 0x1787; // 6023

  constructor(program: Program, cause?: Error) {
    super('Invalid max buy amount', program, cause);
  }
}
codeToErrorMap.set(0x1787, InvalidMaxBuyAmountError);
nameToErrorMap.set('InvalidMaxBuyAmount', InvalidMaxBuyAmountError);

/** InvalidMaxAmountPerAddress: Invalid max amount per address */
export class InvalidMaxAmountPerAddressError extends ProgramError {
  override readonly name: string = 'InvalidMaxAmountPerAddress';

  readonly code: number = 0x1788; // 6024

  constructor(program: Program, cause?: Error) {
    super('Invalid max amount per address', program, cause);
  }
}
codeToErrorMap.set(0x1788, InvalidMaxAmountPerAddressError);
nameToErrorMap.set('InvalidMaxAmountPerAddress', InvalidMaxAmountPerAddressError);

/** InvalidRefundAllowedCap: Invalid refund allowed cap */
export class InvalidRefundAllowedCapError extends ProgramError {
  override readonly name: string = 'InvalidRefundAllowedCap';

  readonly code: number = 0x1789; // 6025

  constructor(program: Program, cause?: Error) {
    super('Invalid refund allowed cap', program, cause);
  }
}
codeToErrorMap.set(0x1789, InvalidRefundAllowedCapError);
nameToErrorMap.set('InvalidRefundAllowedCap', InvalidRefundAllowedCapError);

/** InvalidAccessConfig: Cannot use both an allowlist and a whitelist token */
export class InvalidAccessConfigError extends ProgramError {
  override readonly name: string = 'InvalidAccessConfig';

  readonly code: number = 0x178a; // 6026

  constructor(program: Program, cause?: Error) {
    super('Cannot use both an allowlist and a whitelist token', program, cause);
  }
}
codeToErrorMap.set(0x178a, InvalidAccessConfigError);
nameToErrorMap.set('InvalidAccessConfig', InvalidAccessConfigError);

/** WhitelistTokenMintRequired: Whitelist token mint required when using a whitelist */
export class WhitelistTokenMintRequiredError extends ProgramError {
  override readonly name: string = 'WhitelistTokenMintRequired';

  readonly code: number = 0x178b; // 6027

  constructor(program: Program, cause?: Error) {
    super('Whitelist token mint required when using a whitelist', program, cause);
  }
}
codeToErrorMap.set(0x178b, WhitelistTokenMintRequiredError);
nameToErrorMap.set('WhitelistTokenMintRequired', WhitelistTokenMintRequiredError);

/** InsufficientLamportsBalance: Insufficient lamports balance */
export class InsufficientLamportsBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientLamportsBalance';

  readonly code: number = 0x178c; // 6028

  constructor(program: Program, cause?: Error) {
    super('Insufficient lamports balance', program, cause);
  }
}
codeToErrorMap.set(0x178c, InsufficientLamportsBalanceError);
nameToErrorMap.set('InsufficientLamportsBalance', InsufficientLamportsBalanceError);

/** InsufficientSaleTokenBalance: Insufficient sale token balance */
export class InsufficientSaleTokenBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientSaleTokenBalance';

  readonly code: number = 0x178d; // 6029

  constructor(program: Program, cause?: Error) {
    super('Insufficient sale token balance', program, cause);
  }
}
codeToErrorMap.set(0x178d, InsufficientSaleTokenBalanceError);
nameToErrorMap.set('InsufficientSaleTokenBalance', InsufficientSaleTokenBalanceError);

/** InvalidTokenAmount: Invalid token amount */
export class InvalidTokenAmountError extends ProgramError {
  override readonly name: string = 'InvalidTokenAmount';

  readonly code: number = 0x178e; // 6030

  constructor(program: Program, cause?: Error) {
    super('Invalid token amount', program, cause);
  }
}
codeToErrorMap.set(0x178e, InvalidTokenAmountError);
nameToErrorMap.set('InvalidTokenAmount', InvalidTokenAmountError);

/** InvalidBump: Invalid bump */
export class InvalidBumpError extends ProgramError {
  override readonly name: string = 'InvalidBump';

  readonly code: number = 0x178f; // 6031

  constructor(program: Program, cause?: Error) {
    super('Invalid bump', program, cause);
  }
}
codeToErrorMap.set(0x178f, InvalidBumpError);
nameToErrorMap.set('InvalidBump', InvalidBumpError);

/** SaleNotActive: Sale not active */
export class SaleNotActiveError extends ProgramError {
  override readonly name: string = 'SaleNotActive';

  readonly code: number = 0x1790; // 6032

  constructor(program: Program, cause?: Error) {
    super('Sale not active', program, cause);
  }
}
codeToErrorMap.set(0x1790, SaleNotActiveError);
nameToErrorMap.set('SaleNotActive', SaleNotActiveError);

/** TokenAmountBelowMinimum: Token amount below minimum */
export class TokenAmountBelowMinimumError extends ProgramError {
  override readonly name: string = 'TokenAmountBelowMinimum';

  readonly code: number = 0x1791; // 6033

  constructor(program: Program, cause?: Error) {
    super('Token amount below minimum', program, cause);
  }
}
codeToErrorMap.set(0x1791, TokenAmountBelowMinimumError);
nameToErrorMap.set('TokenAmountBelowMinimum', TokenAmountBelowMinimumError);

/** TokenAmountExceedsMaximum: Token amount exceeds maximum */
export class TokenAmountExceedsMaximumError extends ProgramError {
  override readonly name: string = 'TokenAmountExceedsMaximum';

  readonly code: number = 0x1792; // 6034

  constructor(program: Program, cause?: Error) {
    super('Token amount exceeds maximum', program, cause);
  }
}
codeToErrorMap.set(0x1792, TokenAmountExceedsMaximumError);
nameToErrorMap.set('TokenAmountExceedsMaximum', TokenAmountExceedsMaximumError);

/** TokenAmountExceedsMaxPerAddress: Token amount exceeds max per address */
export class TokenAmountExceedsMaxPerAddressError extends ProgramError {
  override readonly name: string = 'TokenAmountExceedsMaxPerAddress';

  readonly code: number = 0x1793; // 6035

  constructor(program: Program, cause?: Error) {
    super('Token amount exceeds max per address', program, cause);
  }
}
codeToErrorMap.set(0x1793, TokenAmountExceedsMaxPerAddressError);
nameToErrorMap.set('TokenAmountExceedsMaxPerAddress', TokenAmountExceedsMaxPerAddressError);

/** NoAllowlist: No allowlist */
export class NoAllowlistError extends ProgramError {
  override readonly name: string = 'NoAllowlist';

  readonly code: number = 0x1794; // 6036

  constructor(program: Program, cause?: Error) {
    super('No allowlist', program, cause);
  }
}
codeToErrorMap.set(0x1794, NoAllowlistError);
nameToErrorMap.set('NoAllowlist', NoAllowlistError);

/** NoWhitelistToken: Sale does not have a whitelist token */
export class NoWhitelistTokenError extends ProgramError {
  override readonly name: string = 'NoWhitelistToken';

  readonly code: number = 0x1795; // 6037

  constructor(program: Program, cause?: Error) {
    super('Sale does not have a whitelist token', program, cause);
  }
}
codeToErrorMap.set(0x1795, NoWhitelistTokenError);
nameToErrorMap.set('NoWhitelistToken', NoWhitelistTokenError);

/** WhitelistTokenRequired: Whitelist token required */
export class WhitelistTokenRequiredError extends ProgramError {
  override readonly name: string = 'WhitelistTokenRequired';

  readonly code: number = 0x1796; // 6038

  constructor(program: Program, cause?: Error) {
    super('Whitelist token required', program, cause);
  }
}
codeToErrorMap.set(0x1796, WhitelistTokenRequiredError);
nameToErrorMap.set('WhitelistTokenRequired', WhitelistTokenRequiredError);

/** AllowlistProofRequired: Allowlist proof required */
export class AllowlistProofRequiredError extends ProgramError {
  override readonly name: string = 'AllowlistProofRequired';

  readonly code: number = 0x1797; // 6039

  constructor(program: Program, cause?: Error) {
    super('Allowlist proof required', program, cause);
  }
}
codeToErrorMap.set(0x1797, AllowlistProofRequiredError);
nameToErrorMap.set('AllowlistProofRequired', AllowlistProofRequiredError);

/** NotAllowlisted: Not allowlisted */
export class NotAllowlistedError extends ProgramError {
  override readonly name: string = 'NotAllowlisted';

  readonly code: number = 0x1798; // 6040

  constructor(program: Program, cause?: Error) {
    super('Not allowlisted', program, cause);
  }
}
codeToErrorMap.set(0x1798, NotAllowlistedError);
nameToErrorMap.set('NotAllowlisted', NotAllowlistedError);

/** BotTaxTooHigh: Bot tax too high */
export class BotTaxTooHighError extends ProgramError {
  override readonly name: string = 'BotTaxTooHigh';

  readonly code: number = 0x1799; // 6041

  constructor(program: Program, cause?: Error) {
    super('Bot tax too high', program, cause);
  }
}
codeToErrorMap.set(0x1799, BotTaxTooHighError);
nameToErrorMap.set('BotTaxTooHigh', BotTaxTooHighError);

/** WhitelistCollectionRequired: Whitelist collection required */
export class WhitelistCollectionRequiredError extends ProgramError {
  override readonly name: string = 'WhitelistCollectionRequired';

  readonly code: number = 0x179a; // 6042

  constructor(program: Program, cause?: Error) {
    super('Whitelist collection required', program, cause);
  }
}
codeToErrorMap.set(0x179a, WhitelistCollectionRequiredError);
nameToErrorMap.set('WhitelistCollectionRequired', WhitelistCollectionRequiredError);

/** MetaplexCoreProgramRequired: Metaplex Core program required */
export class MetaplexCoreProgramRequiredError extends ProgramError {
  override readonly name: string = 'MetaplexCoreProgramRequired';

  readonly code: number = 0x179b; // 6043

  constructor(program: Program, cause?: Error) {
    super('Metaplex Core program required', program, cause);
  }
}
codeToErrorMap.set(0x179b, MetaplexCoreProgramRequiredError);
nameToErrorMap.set('MetaplexCoreProgramRequired', MetaplexCoreProgramRequiredError);

/** InvalidWhitelistToken: Invalid whitelist token */
export class InvalidWhitelistTokenError extends ProgramError {
  override readonly name: string = 'InvalidWhitelistToken';

  readonly code: number = 0x179c; // 6044

  constructor(program: Program, cause?: Error) {
    super('Invalid whitelist token', program, cause);
  }
}
codeToErrorMap.set(0x179c, InvalidWhitelistTokenError);
nameToErrorMap.set('InvalidWhitelistToken', InvalidWhitelistTokenError);

/** InvalidWhitelistTokenCollection: Invalid whitelist token collection */
export class InvalidWhitelistTokenCollectionError extends ProgramError {
  override readonly name: string = 'InvalidWhitelistTokenCollection';

  readonly code: number = 0x179d; // 6045

  constructor(program: Program, cause?: Error) {
    super('Invalid whitelist token collection', program, cause);
  }
}
codeToErrorMap.set(0x179d, InvalidWhitelistTokenCollectionError);
nameToErrorMap.set('InvalidWhitelistTokenCollection', InvalidWhitelistTokenCollectionError);

/** InvalidTokenSale: Invalid token sale */
export class InvalidTokenSaleError extends ProgramError {
  override readonly name: string = 'InvalidTokenSale';

  readonly code: number = 0x179e; // 6046

  constructor(program: Program, cause?: Error) {
    super('Invalid token sale', program, cause);
  }
}
codeToErrorMap.set(0x179e, InvalidTokenSaleError);
nameToErrorMap.set('InvalidTokenSale', InvalidTokenSaleError);

/** TokenSaleHasUnlockSchedule: Token sale has an unlock schedule */
export class TokenSaleHasUnlockScheduleError extends ProgramError {
  override readonly name: string = 'TokenSaleHasUnlockSchedule';

  readonly code: number = 0x179f; // 6047

  constructor(program: Program, cause?: Error) {
    super('Token sale has an unlock schedule', program, cause);
  }
}
codeToErrorMap.set(0x179f, TokenSaleHasUnlockScheduleError);
nameToErrorMap.set('TokenSaleHasUnlockSchedule', TokenSaleHasUnlockScheduleError);

/** TokenSaleHasNoUnlockSchedule: Token sale has no unlock schedule */
export class TokenSaleHasNoUnlockScheduleError extends ProgramError {
  override readonly name: string = 'TokenSaleHasNoUnlockSchedule';

  readonly code: number = 0x17a0; // 6048

  constructor(program: Program, cause?: Error) {
    super('Token sale has no unlock schedule', program, cause);
  }
}
codeToErrorMap.set(0x17a0, TokenSaleHasNoUnlockScheduleError);
nameToErrorMap.set('TokenSaleHasNoUnlockSchedule', TokenSaleHasNoUnlockScheduleError);

/** InvalidLamportsAmount: Invalid lamports amount */
export class InvalidLamportsAmountError extends ProgramError {
  override readonly name: string = 'InvalidLamportsAmount';

  readonly code: number = 0x17a1; // 6049

  constructor(program: Program, cause?: Error) {
    super('Invalid lamports amount', program, cause);
  }
}
codeToErrorMap.set(0x17a1, InvalidLamportsAmountError);
nameToErrorMap.set('InvalidLamportsAmount', InvalidLamportsAmountError);

/** InsufficientSaleLamportsBalance: Insufficient sale lamports balance */
export class InsufficientSaleLamportsBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientSaleLamportsBalance';

  readonly code: number = 0x17a2; // 6050

  constructor(program: Program, cause?: Error) {
    super('Insufficient sale lamports balance', program, cause);
  }
}
codeToErrorMap.set(0x17a2, InsufficientSaleLamportsBalanceError);
nameToErrorMap.set('InsufficientSaleLamportsBalance', InsufficientSaleLamportsBalanceError);

/** RefundNotAllowed: Refund not allowed */
export class RefundNotAllowedError extends ProgramError {
  override readonly name: string = 'RefundNotAllowed';

  readonly code: number = 0x17a3; // 6051

  constructor(program: Program, cause?: Error) {
    super('Refund not allowed', program, cause);
  }
}
codeToErrorMap.set(0x17a3, RefundNotAllowedError);
nameToErrorMap.set('RefundNotAllowed', RefundNotAllowedError);

/** ClaimingNotAllowed: Claiming not allowed at this stage */
export class ClaimingNotAllowedError extends ProgramError {
  override readonly name: string = 'ClaimingNotAllowed';

  readonly code: number = 0x17a4; // 6052

  constructor(program: Program, cause?: Error) {
    super('Claiming not allowed at this stage', program, cause);
  }
}
codeToErrorMap.set(0x17a4, ClaimingNotAllowedError);
nameToErrorMap.set('ClaimingNotAllowed', ClaimingNotAllowedError);

/** InvalidPurchaseRecordAuthority: Invalid purchase record authority */
export class InvalidPurchaseRecordAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidPurchaseRecordAuthority';

  readonly code: number = 0x17a5; // 6053

  constructor(program: Program, cause?: Error) {
    super('Invalid purchase record authority', program, cause);
  }
}
codeToErrorMap.set(0x17a5, InvalidPurchaseRecordAuthorityError);
nameToErrorMap.set('InvalidPurchaseRecordAuthority', InvalidPurchaseRecordAuthorityError);

/** ArithmeticError: Arithmetic error */
export class ArithmeticErrorError extends ProgramError {
  override readonly name: string = 'ArithmeticError';

  readonly code: number = 0x17a6; // 6054

  constructor(program: Program, cause?: Error) {
    super('Arithmetic error', program, cause);
  }
}
codeToErrorMap.set(0x17a6, ArithmeticErrorError);
nameToErrorMap.set('ArithmeticError', ArithmeticErrorError);

/** SaleAlreadyFinalized: Sale already finalized */
export class SaleAlreadyFinalizedError extends ProgramError {
  override readonly name: string = 'SaleAlreadyFinalized';

  readonly code: number = 0x17a7; // 6055

  constructor(program: Program, cause?: Error) {
    super('Sale already finalized', program, cause);
  }
}
codeToErrorMap.set(0x17a7, SaleAlreadyFinalizedError);
nameToErrorMap.set('SaleAlreadyFinalized', SaleAlreadyFinalizedError);

/** SaleNotFinalized: Sale not finalized */
export class SaleNotFinalizedError extends ProgramError {
  override readonly name: string = 'SaleNotFinalized';

  readonly code: number = 0x17a8; // 6056

  constructor(program: Program, cause?: Error) {
    super('Sale not finalized', program, cause);
  }
}
codeToErrorMap.set(0x17a8, SaleNotFinalizedError);
nameToErrorMap.set('SaleNotFinalized', SaleNotFinalizedError);

/** SaleCancelled: Sale cancelled */
export class SaleCancelledError extends ProgramError {
  override readonly name: string = 'SaleCancelled';

  readonly code: number = 0x17a9; // 6057

  constructor(program: Program, cause?: Error) {
    super('Sale cancelled', program, cause);
  }
}
codeToErrorMap.set(0x17a9, SaleCancelledError);
nameToErrorMap.set('SaleCancelled', SaleCancelledError);

/** RefundsAllowed: Refunds allowed */
export class RefundsAllowedError extends ProgramError {
  override readonly name: string = 'RefundsAllowed';

  readonly code: number = 0x17aa; // 6058

  constructor(program: Program, cause?: Error) {
    super('Refunds allowed', program, cause);
  }
}
codeToErrorMap.set(0x17aa, RefundsAllowedError);
nameToErrorMap.set('RefundsAllowed', RefundsAllowedError);

/** AmountMustBeGreaterThanZero: Amount must be greater than zero */
export class AmountMustBeGreaterThanZeroError extends ProgramError {
  override readonly name: string = 'AmountMustBeGreaterThanZero';

  readonly code: number = 0x17ab; // 6059

  constructor(program: Program, cause?: Error) {
    super('Amount must be greater than zero', program, cause);
  }
}
codeToErrorMap.set(0x17ab, AmountMustBeGreaterThanZeroError);
nameToErrorMap.set('AmountMustBeGreaterThanZero', AmountMustBeGreaterThanZeroError);

/** SaleNotCancelled: Sale not cancelled */
export class SaleNotCancelledError extends ProgramError {
  override readonly name: string = 'SaleNotCancelled';

  readonly code: number = 0x17ac; // 6060

  constructor(program: Program, cause?: Error) {
    super('Sale not cancelled', program, cause);
  }
}
codeToErrorMap.set(0x17ac, SaleNotCancelledError);
nameToErrorMap.set('SaleNotCancelled', SaleNotCancelledError);

/** SaleFinalized: Sale finalized */
export class SaleFinalizedError extends ProgramError {
  override readonly name: string = 'SaleFinalized';

  readonly code: number = 0x17ad; // 6061

  constructor(program: Program, cause?: Error) {
    super('Sale finalized', program, cause);
  }
}
codeToErrorMap.set(0x17ad, SaleFinalizedError);
nameToErrorMap.set('SaleFinalized', SaleFinalizedError);

/** SaleAlreadyCancelled: Sale already cancelled */
export class SaleAlreadyCancelledError extends ProgramError {
  override readonly name: string = 'SaleAlreadyCancelled';

  readonly code: number = 0x17ae; // 6062

  constructor(program: Program, cause?: Error) {
    super('Sale already cancelled', program, cause);
  }
}
codeToErrorMap.set(0x17ae, SaleAlreadyCancelledError);
nameToErrorMap.set('SaleAlreadyCancelled', SaleAlreadyCancelledError);

/** SaleAlreadyEnded: Sale already ended */
export class SaleAlreadyEndedError extends ProgramError {
  override readonly name: string = 'SaleAlreadyEnded';

  readonly code: number = 0x17af; // 6063

  constructor(program: Program, cause?: Error) {
    super('Sale already ended', program, cause);
  }
}
codeToErrorMap.set(0x17af, SaleAlreadyEndedError);
nameToErrorMap.set('SaleAlreadyEnded', SaleAlreadyEndedError);

/** SaleNotEnded: Sale not ended */
export class SaleNotEndedError extends ProgramError {
  override readonly name: string = 'SaleNotEnded';

  readonly code: number = 0x17b0; // 6064

  constructor(program: Program, cause?: Error) {
    super('Sale not ended', program, cause);
  }
}
codeToErrorMap.set(0x17b0, SaleNotEndedError);
nameToErrorMap.set('SaleNotEnded', SaleNotEndedError);

/** InvalidPriceDecimals: Invalid price decimals */
export class InvalidPriceDecimalsError extends ProgramError {
  override readonly name: string = 'InvalidPriceDecimals';

  readonly code: number = 0x17b1; // 6065

  constructor(program: Program, cause?: Error) {
    super('Invalid price decimals', program, cause);
  }
}
codeToErrorMap.set(0x17b1, InvalidPriceDecimalsError);
nameToErrorMap.set('InvalidPriceDecimals', InvalidPriceDecimalsError);

/** PriceIsZero: Price is zero */
export class PriceIsZeroError extends ProgramError {
  override readonly name: string = 'PriceIsZero';

  readonly code: number = 0x17b2; // 6066

  constructor(program: Program, cause?: Error) {
    super('Price is zero', program, cause);
  }
}
codeToErrorMap.set(0x17b2, PriceIsZeroError);
nameToErrorMap.set('PriceIsZero', PriceIsZeroError);

/** PriceError: Price error */
export class PriceErrorError extends ProgramError {
  override readonly name: string = 'PriceError';

  readonly code: number = 0x17b3; // 6067

  constructor(program: Program, cause?: Error) {
    super('Price error', program, cause);
  }
}
codeToErrorMap.set(0x17b3, PriceErrorError);
nameToErrorMap.set('PriceError', PriceErrorError);

/** SaleSolAmountTooHigh: Sale sol amount too high */
export class SaleSolAmountTooHighError extends ProgramError {
  override readonly name: string = 'SaleSolAmountTooHigh';

  readonly code: number = 0x17b4; // 6068

  constructor(program: Program, cause?: Error) {
    super('Sale sol amount too high', program, cause);
  }
}
codeToErrorMap.set(0x17b4, SaleSolAmountTooHighError);
nameToErrorMap.set('SaleSolAmountTooHigh', SaleSolAmountTooHighError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getCapultTokenSalesErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getCapultTokenSalesErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
