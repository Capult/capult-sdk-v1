/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** NotAuthorized: You are not authorized to perform this action */
export class NotAuthorizedError extends ProgramError {
  override readonly name: string = 'NotAuthorized';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('You are not authorized to perform this action', program, cause);
  }
}
codeToErrorMap.set(0x1770, NotAuthorizedError);
nameToErrorMap.set('NotAuthorized', NotAuthorizedError);

/** InvalidSeeds: Invalid Capult owned pda seeds */
export class InvalidSeedsError extends ProgramError {
  override readonly name: string = 'InvalidSeeds';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid Capult owned pda seeds', program, cause);
  }
}
codeToErrorMap.set(0x1771, InvalidSeedsError);
nameToErrorMap.set('InvalidSeeds', InvalidSeedsError);

/** IncorrectOwner: Provided PDA is not owned by the expected Capult program */
export class IncorrectOwnerError extends ProgramError {
  override readonly name: string = 'IncorrectOwner';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Provided PDA is not owned by the expected Capult program', program, cause);
  }
}
codeToErrorMap.set(0x1772, IncorrectOwnerError);
nameToErrorMap.set('IncorrectOwner', IncorrectOwnerError);

/** AuthorityDelegated: Token lock vault has a delegated authority */
export class AuthorityDelegatedError extends ProgramError {
  override readonly name: string = 'AuthorityDelegated';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Token lock vault has a delegated authority', program, cause);
  }
}
codeToErrorMap.set(0x1773, AuthorityDelegatedError);
nameToErrorMap.set('AuthorityDelegated', AuthorityDelegatedError);

/** InvalidPda: Provided PDA is not a Capult program PDA */
export class InvalidPdaError extends ProgramError {
  override readonly name: string = 'InvalidPda';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Provided PDA is not a Capult program PDA', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidPdaError);
nameToErrorMap.set('InvalidPda', InvalidPdaError);

/** UrlTooLong: URL is too long */
export class UrlTooLongError extends ProgramError {
  override readonly name: string = 'UrlTooLong';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('URL is too long', program, cause);
  }
}
codeToErrorMap.set(0x1775, UrlTooLongError);
nameToErrorMap.set('UrlTooLong', UrlTooLongError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getCapultMetadataErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getCapultMetadataErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
