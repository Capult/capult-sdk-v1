/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type FeeConfig = Account<FeeConfigAccountData>;

export type FeeConfigAccountData = {
  discriminator: Uint8Array;
  authority: Option<PublicKey>;
  withdrawAuthority: PublicKey;
  createVaultFee: bigint;
  initializedAt: bigint;
  bump: number;
};

export type FeeConfigAccountDataArgs = {
  authority: OptionOrNullable<PublicKey>;
  withdrawAuthority: PublicKey;
  createVaultFee: number | bigint;
  initializedAt: number | bigint;
  bump: number;
};

export function getFeeConfigAccountDataSerializer(): Serializer<FeeConfigAccountDataArgs, FeeConfigAccountData> {
  return mapSerializer<FeeConfigAccountDataArgs, any, FeeConfigAccountData>(
    struct<FeeConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', option(publicKeySerializer())],
        ['withdrawAuthority', publicKeySerializer()],
        ['createVaultFee', u64()],
        ['initializedAt', i64()],
        ['bump', u8()],
      ],
      { description: 'FeeConfigAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([143, 52, 146, 187, 219, 123, 76, 155]) })
  ) as Serializer<FeeConfigAccountDataArgs, FeeConfigAccountData>;
}

export function deserializeFeeConfig(rawAccount: RpcAccount): FeeConfig {
  return deserializeAccount(rawAccount, getFeeConfigAccountDataSerializer());
}

export async function fetchFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FeeConfig> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'FeeConfig');
  return deserializeFeeConfig(maybeAccount);
}

export async function safeFetchFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FeeConfig | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeFeeConfig(maybeAccount) : null;
}

export async function fetchAllFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FeeConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FeeConfig');
    return deserializeFeeConfig(maybeAccount);
  });
}

export async function safeFetchAllFeeConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FeeConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeFeeConfig(maybeAccount as RpcAccount));
}

export function getFeeConfigGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'capultEternalVaults',
    'CPEVjv7pvzLceHN9auJhniU2y3divtY4PUaTvLEoxpbP'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: OptionOrNullable<PublicKey>;
      withdrawAuthority: PublicKey;
      createVaultFee: number | bigint;
      initializedAt: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, option(publicKeySerializer())],
      withdrawAuthority: [null, publicKeySerializer()],
      createVaultFee: [null, u64()],
      initializedAt: [null, i64()],
      bump: [null, u8()],
    })
    .deserializeUsing<FeeConfig>((account) => deserializeFeeConfig(account))
    .whereField('discriminator', new Uint8Array([143, 52, 146, 187, 219, 123, 76, 155]));
}
