/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { Unlock, UnlockArgs, getUnlockSerializer } from '../types';

export type EternalVault = Account<EternalVaultAccountData>;

export type EternalVaultAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  tokenMint: PublicKey;
  olderUnlockDelay: bigint;
  newerUnlockDelay: bigint;
  newerDelayValidFrom: Option<bigint>;
  unlock: Option<Unlock>;
  vaultInitKey: PublicKey;
  initializedAt: bigint;
  bump: number;
};

export type EternalVaultAccountDataArgs = {
  authority: PublicKey;
  tokenMint: PublicKey;
  olderUnlockDelay: number | bigint;
  newerUnlockDelay: number | bigint;
  newerDelayValidFrom: OptionOrNullable<number | bigint>;
  unlock: OptionOrNullable<UnlockArgs>;
  vaultInitKey: PublicKey;
  initializedAt: number | bigint;
  bump: number;
};

export function getEternalVaultAccountDataSerializer(): Serializer<
  EternalVaultAccountDataArgs,
  EternalVaultAccountData
> {
  return mapSerializer<EternalVaultAccountDataArgs, any, EternalVaultAccountData>(
    struct<EternalVaultAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['tokenMint', publicKeySerializer()],
        ['olderUnlockDelay', i64()],
        ['newerUnlockDelay', i64()],
        ['newerDelayValidFrom', option(i64())],
        ['unlock', option(getUnlockSerializer())],
        ['vaultInitKey', publicKeySerializer()],
        ['initializedAt', i64()],
        ['bump', u8()],
      ],
      { description: 'EternalVaultAccountData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([30, 182, 20, 105, 227, 222, 218, 182]) })
  ) as Serializer<EternalVaultAccountDataArgs, EternalVaultAccountData>;
}

export function deserializeEternalVault(rawAccount: RpcAccount): EternalVault {
  return deserializeAccount(rawAccount, getEternalVaultAccountDataSerializer());
}

export async function fetchEternalVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EternalVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'EternalVault');
  return deserializeEternalVault(maybeAccount);
}

export async function safeFetchEternalVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EternalVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeEternalVault(maybeAccount) : null;
}

export async function fetchAllEternalVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EternalVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'EternalVault');
    return deserializeEternalVault(maybeAccount);
  });
}

export async function safeFetchAllEternalVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EternalVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeEternalVault(maybeAccount as RpcAccount));
}

export function getEternalVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'capultEternalVaults',
    'CPEVjv7pvzLceHN9auJhniU2y3divtY4PUaTvLEoxpbP'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      tokenMint: PublicKey;
      olderUnlockDelay: number | bigint;
      newerUnlockDelay: number | bigint;
      newerDelayValidFrom: OptionOrNullable<number | bigint>;
      unlock: OptionOrNullable<UnlockArgs>;
      vaultInitKey: PublicKey;
      initializedAt: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      tokenMint: [40, publicKeySerializer()],
      olderUnlockDelay: [72, i64()],
      newerUnlockDelay: [80, i64()],
      newerDelayValidFrom: [88, option(i64())],
      unlock: [null, option(getUnlockSerializer())],
      vaultInitKey: [null, publicKeySerializer()],
      initializedAt: [null, i64()],
      bump: [null, u8()],
    })
    .deserializeUsing<EternalVault>((account) => deserializeEternalVault(account))
    .whereField('discriminator', new Uint8Array([30, 182, 20, 105, 227, 222, 218, 182]));
}
