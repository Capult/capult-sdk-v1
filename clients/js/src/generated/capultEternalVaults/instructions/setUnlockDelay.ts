/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, bytes, i64, mapSerializer, struct } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type SetUnlockDelayInstructionAccounts = {
  eternalVault: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type SetUnlockDelayInstructionData = { discriminator: Uint8Array; unlockDelay: bigint };

export type SetUnlockDelayInstructionDataArgs = { unlockDelay: number | bigint };

export function getSetUnlockDelayInstructionDataSerializer(): Serializer<
  SetUnlockDelayInstructionDataArgs,
  SetUnlockDelayInstructionData
> {
  return mapSerializer<SetUnlockDelayInstructionDataArgs, any, SetUnlockDelayInstructionData>(
    struct<SetUnlockDelayInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['unlockDelay', i64()],
      ],
      { description: 'SetUnlockDelayInstructionData' }
    ),
    (value) => ({ ...value, discriminator: new Uint8Array([218, 20, 106, 149, 153, 126, 219, 50]) })
  ) as Serializer<SetUnlockDelayInstructionDataArgs, SetUnlockDelayInstructionData>;
}

// Args.
export type SetUnlockDelayInstructionArgs = SetUnlockDelayInstructionDataArgs;

// Instruction.
export function setUnlockDelay(
  context: Pick<Context, 'identity' | 'programs'>,
  input: SetUnlockDelayInstructionAccounts & SetUnlockDelayInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'capultEternalVaults',
    'CPEVjv7pvzLceHN9auJhniU2y3divtY4PUaTvLEoxpbP'
  );

  // Accounts.
  const resolvedAccounts = {
    eternalVault: { index: 0, isWritable: true as boolean, value: input.eternalVault ?? null },
    authority: { index: 1, isWritable: true as boolean, value: input.authority ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetUnlockDelayInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, 'programId', programId);

  // Data.
  const data = getSetUnlockDelayInstructionDataSerializer().serialize(
    resolvedArgs as SetUnlockDelayInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
