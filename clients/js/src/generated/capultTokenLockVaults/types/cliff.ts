/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  u16,
  u64,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type Cliff =
  | { __kind: 'None' }
  | { __kind: 'BasisPoints'; fields: [number] }
  | { __kind: 'Amount'; fields: [bigint] };

export type CliffArgs =
  | { __kind: 'None' }
  | { __kind: 'BasisPoints'; fields: [number] }
  | { __kind: 'Amount'; fields: [number | bigint] };

export function getCliffSerializer(): Serializer<CliffArgs, Cliff> {
  return dataEnum<Cliff>(
    [
      ['None', unit()],
      ['BasisPoints', struct<GetDataEnumKindContent<Cliff, 'BasisPoints'>>([['fields', tuple([u16()])]])],
      ['Amount', struct<GetDataEnumKindContent<Cliff, 'Amount'>>([['fields', tuple([u64()])]])],
    ],
    { description: 'Cliff' }
  ) as Serializer<CliffArgs, Cliff>;
}

// Data Enum Helpers.
export function cliff(kind: 'None'): GetDataEnumKind<CliffArgs, 'None'>;
export function cliff(
  kind: 'BasisPoints',
  data: GetDataEnumKindContent<CliffArgs, 'BasisPoints'>['fields']
): GetDataEnumKind<CliffArgs, 'BasisPoints'>;
export function cliff(
  kind: 'Amount',
  data: GetDataEnumKindContent<CliffArgs, 'Amount'>['fields']
): GetDataEnumKind<CliffArgs, 'Amount'>;
export function cliff<K extends CliffArgs['__kind']>(kind: K, data?: any): Extract<CliffArgs, { __kind: K }> {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function isCliff<K extends Cliff['__kind']>(kind: K, value: Cliff): value is Cliff & { __kind: K } {
  return value.__kind === kind;
}
